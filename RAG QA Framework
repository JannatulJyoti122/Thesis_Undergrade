{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JannatulJyoti122/Thesis_Undergrade/blob/main/RAG%20QA%20Framework\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EG9pUOA3-Ts0",
        "outputId": "42f630c6-cc27-432a-9d5a-145020e421ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: langchain in /usr/local/lib/python3.11/dist-packages (0.3.25)\n",
            "Collecting chromadb\n",
            "  Downloading chromadb-1.0.12-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.9 kB)\n",
            "Collecting faiss-cpu\n",
            "  Downloading faiss_cpu-1.11.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\n",
            "Requirement already satisfied: openai in /usr/local/lib/python3.11/dist-packages (1.84.0)\n",
            "Requirement already satisfied: tiktoken in /usr/local/lib/python3.11/dist-packages (0.9.0)\n",
            "Collecting langchain_openai\n",
            "  Downloading langchain_openai-0.3.21-py3-none-any.whl.metadata (2.3 kB)\n",
            "Collecting langchain-community\n",
            "  Downloading langchain_community-0.3.24-py3-none-any.whl.metadata (2.5 kB)\n",
            "Collecting wikipedia\n",
            "  Downloading wikipedia-1.4.0.tar.gz (27 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: langchain-core<1.0.0,>=0.3.58 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.63)\n",
            "Requirement already satisfied: langchain-text-splitters<1.0.0,>=0.3.8 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.8)\n",
            "Requirement already satisfied: langsmith<0.4,>=0.1.17 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.44)\n",
            "Requirement already satisfied: pydantic<3.0.0,>=2.7.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.11.5)\n",
            "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.0.41)\n",
            "Requirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.32.3)\n",
            "Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain) (6.0.2)\n",
            "Requirement already satisfied: build>=1.0.3 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.2.2.post1)\n",
            "Collecting fastapi==0.115.9 (from chromadb)\n",
            "  Downloading fastapi-0.115.9-py3-none-any.whl.metadata (27 kB)\n",
            "Requirement already satisfied: uvicorn>=0.18.3 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (0.34.3)\n",
            "Requirement already satisfied: numpy>=1.22.5 in /usr/local/lib/python3.11/dist-packages (from chromadb) (2.0.2)\n",
            "Collecting posthog>=2.4.0 (from chromadb)\n",
            "  Downloading posthog-4.4.0-py2.py3-none-any.whl.metadata (5.5 kB)\n",
            "Requirement already satisfied: typing-extensions>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.14.0)\n",
            "Collecting onnxruntime>=1.14.1 (from chromadb)\n",
            "  Downloading onnxruntime-1.22.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (4.5 kB)\n",
            "Collecting opentelemetry-api>=1.2.0 (from chromadb)\n",
            "  Downloading opentelemetry_api-1.34.0-py3-none-any.whl.metadata (1.5 kB)\n",
            "Collecting opentelemetry-exporter-otlp-proto-grpc>=1.2.0 (from chromadb)\n",
            "  Downloading opentelemetry_exporter_otlp_proto_grpc-1.34.0-py3-none-any.whl.metadata (2.4 kB)\n",
            "Collecting opentelemetry-instrumentation-fastapi>=0.41b0 (from chromadb)\n",
            "  Downloading opentelemetry_instrumentation_fastapi-0.55b0-py3-none-any.whl.metadata (2.2 kB)\n",
            "Collecting opentelemetry-sdk>=1.2.0 (from chromadb)\n",
            "  Downloading opentelemetry_sdk-1.34.0-py3-none-any.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: tokenizers>=0.13.2 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.21.1)\n",
            "Collecting pypika>=0.48.9 (from chromadb)\n",
            "  Downloading PyPika-0.48.9.tar.gz (67 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.3/67.3 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: tqdm>=4.65.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.67.1)\n",
            "Collecting overrides>=7.3.1 (from chromadb)\n",
            "  Downloading overrides-7.7.0-py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: importlib-resources in /usr/local/lib/python3.11/dist-packages (from chromadb) (6.5.2)\n",
            "Requirement already satisfied: grpcio>=1.58.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.72.1)\n",
            "Collecting bcrypt>=4.0.1 (from chromadb)\n",
            "  Downloading bcrypt-4.3.0-cp39-abi3-manylinux_2_34_x86_64.whl.metadata (10 kB)\n",
            "Requirement already satisfied: typer>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.16.0)\n",
            "Collecting kubernetes>=28.1.0 (from chromadb)\n",
            "  Downloading kubernetes-32.0.1-py2.py3-none-any.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: tenacity>=8.2.3 in /usr/local/lib/python3.11/dist-packages (from chromadb) (9.1.2)\n",
            "Collecting mmh3>=4.0.1 (from chromadb)\n",
            "  Downloading mmh3-5.1.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (16 kB)\n",
            "Requirement already satisfied: orjson>=3.9.12 in /usr/local/lib/python3.11/dist-packages (from chromadb) (3.10.18)\n",
            "Requirement already satisfied: httpx>=0.27.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.28.1)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (13.9.4)\n",
            "Requirement already satisfied: jsonschema>=4.19.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.24.0)\n",
            "Collecting starlette<0.46.0,>=0.40.0 (from fastapi==0.115.9->chromadb)\n",
            "  Downloading starlette-0.45.3-py3-none-any.whl.metadata (6.3 kB)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from faiss-cpu) (24.2)\n",
            "Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai) (4.9.0)\n",
            "Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai) (1.9.0)\n",
            "Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai) (0.10.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai) (1.3.1)\n",
            "Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken) (2024.11.6)\n",
            "Collecting langchain-core<1.0.0,>=0.3.58 (from langchain)\n",
            "  Downloading langchain_core-0.3.64-py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (3.11.15)\n",
            "Collecting dataclasses-json<0.7,>=0.5.7 (from langchain-community)\n",
            "  Downloading dataclasses_json-0.6.7-py3-none-any.whl.metadata (25 kB)\n",
            "Collecting pydantic-settings<3.0.0,>=2.4.0 (from langchain-community)\n",
            "  Downloading pydantic_settings-2.9.1-py3-none-any.whl.metadata (3.8 kB)\n",
            "Collecting httpx-sse<1.0.0,>=0.4.0 (from langchain-community)\n",
            "  Downloading httpx_sse-0.4.0-py3-none-any.whl.metadata (9.0 kB)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from wikipedia) (4.13.4)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.6.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (6.4.4)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.20.0)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\n",
            "Requirement already satisfied: pyproject_hooks in /usr/local/lib/python3.11/dist-packages (from build>=1.0.3->chromadb) (1.2.0)\n",
            "Collecting marshmallow<4.0.0,>=3.18.0 (from dataclasses-json<0.7,>=0.5.7->langchain-community)\n",
            "  Downloading marshmallow-3.26.1-py3-none-any.whl.metadata (7.3 kB)\n",
            "Collecting typing-inspect<1,>=0.4.0 (from dataclasses-json<0.7,>=0.5.7->langchain-community)\n",
            "  Downloading typing_inspect-0.9.0-py3-none-any.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27.0->chromadb) (2025.4.26)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27.0->chromadb) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.27.0->chromadb) (0.16.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.19.0->chromadb) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.19.0->chromadb) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.19.0->chromadb) (0.25.1)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (1.17.0)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.9.0.post0)\n",
            "Requirement already satisfied: google-auth>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.38.0)\n",
            "Requirement already satisfied: websocket-client!=0.40.0,!=0.41.*,!=0.42.*,>=0.32.0 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (1.8.0)\n",
            "Requirement already satisfied: requests-oauthlib in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.0.0)\n",
            "Requirement already satisfied: oauthlib>=3.2.2 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (3.2.2)\n",
            "Requirement already satisfied: urllib3>=1.24.2 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.4.0)\n",
            "Collecting durationpy>=0.7 (from kubernetes>=28.1.0->chromadb)\n",
            "  Downloading durationpy-0.10-py3-none-any.whl.metadata (340 bytes)\n",
            "Collecting langsmith<0.4,>=0.1.17 (from langchain)\n",
            "  Downloading langsmith-0.3.45-py3-none-any.whl.metadata (15 kB)\n",
            "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain) (1.33)\n",
            "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (1.0.0)\n",
            "Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (0.23.0)\n",
            "Collecting coloredlogs (from onnxruntime>=1.14.1->chromadb)\n",
            "  Downloading coloredlogs-15.0.1-py2.py3-none-any.whl.metadata (12 kB)\n",
            "Requirement already satisfied: flatbuffers in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (25.2.10)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (5.29.5)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (1.13.1)\n",
            "Requirement already satisfied: importlib-metadata<8.8.0,>=6.0 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-api>=1.2.0->chromadb) (8.7.0)\n",
            "Requirement already satisfied: googleapis-common-protos~=1.52 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.2.0->chromadb) (1.70.0)\n",
            "Collecting opentelemetry-exporter-otlp-proto-common==1.34.0 (from opentelemetry-exporter-otlp-proto-grpc>=1.2.0->chromadb)\n",
            "  Downloading opentelemetry_exporter_otlp_proto_common-1.34.0-py3-none-any.whl.metadata (1.9 kB)\n",
            "Collecting opentelemetry-proto==1.34.0 (from opentelemetry-exporter-otlp-proto-grpc>=1.2.0->chromadb)\n",
            "  Downloading opentelemetry_proto-1.34.0-py3-none-any.whl.metadata (2.4 kB)\n",
            "Collecting opentelemetry-instrumentation-asgi==0.55b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->chromadb)\n",
            "  Downloading opentelemetry_instrumentation_asgi-0.55b0-py3-none-any.whl.metadata (2.0 kB)\n",
            "Collecting opentelemetry-instrumentation==0.55b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->chromadb)\n",
            "  Downloading opentelemetry_instrumentation-0.55b0-py3-none-any.whl.metadata (6.7 kB)\n",
            "Collecting opentelemetry-semantic-conventions==0.55b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->chromadb)\n",
            "  Downloading opentelemetry_semantic_conventions-0.55b0-py3-none-any.whl.metadata (2.5 kB)\n",
            "Collecting opentelemetry-util-http==0.55b0 (from opentelemetry-instrumentation-fastapi>=0.41b0->chromadb)\n",
            "  Downloading opentelemetry_util_http-0.55b0-py3-none-any.whl.metadata (2.6 kB)\n",
            "Requirement already satisfied: wrapt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-instrumentation==0.55b0->opentelemetry-instrumentation-fastapi>=0.41b0->chromadb) (1.17.2)\n",
            "Collecting asgiref~=3.0 (from opentelemetry-instrumentation-asgi==0.55b0->opentelemetry-instrumentation-fastapi>=0.41b0->chromadb)\n",
            "  Downloading asgiref-3.8.1-py3-none-any.whl.metadata (9.3 kB)\n",
            "Collecting backoff>=1.10.0 (from posthog>=2.4.0->chromadb)\n",
            "  Downloading backoff-2.2.1-py3-none-any.whl.metadata (14 kB)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (0.4.1)\n",
            "Collecting python-dotenv>=0.21.0 (from pydantic-settings<3.0.0,>=2.4.0->langchain-community)\n",
            "  Downloading python_dotenv-1.1.0-py3-none-any.whl.metadata (24 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (3.4.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->chromadb) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->chromadb) (2.19.1)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain) (3.2.2)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.16.4 in /usr/local/lib/python3.11/dist-packages (from tokenizers>=0.13.2->chromadb) (0.32.4)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer>=0.9.0->chromadb) (8.2.1)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer>=0.9.0->chromadb) (1.5.4)\n",
            "Collecting httptools>=0.6.3 (from uvicorn[standard]>=0.18.3->chromadb)\n",
            "  Downloading httptools-0.6.4-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.6 kB)\n",
            "Collecting uvloop>=0.15.1 (from uvicorn[standard]>=0.18.3->chromadb)\n",
            "  Downloading uvloop-0.21.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)\n",
            "Collecting watchfiles>=0.13 (from uvicorn[standard]>=0.18.3->chromadb)\n",
            "  Downloading watchfiles-1.0.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)\n",
            "Requirement already satisfied: websockets>=10.4 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (15.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->wikipedia) (2.7)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (5.5.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (0.4.2)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (4.9.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.2->chromadb) (3.18.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.2->chromadb) (2025.3.2)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.2->chromadb) (1.1.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata<8.8.0,>=6.0->opentelemetry-api>=1.2.0->chromadb) (3.22.0)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.58->langchain) (3.0.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->chromadb) (0.1.2)\n",
            "Collecting mypy-extensions>=0.3.0 (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community)\n",
            "  Downloading mypy_extensions-1.1.0-py3-none-any.whl.metadata (1.1 kB)\n",
            "Collecting humanfriendly>=9.1 (from coloredlogs->onnxruntime>=1.14.1->chromadb)\n",
            "  Downloading humanfriendly-10.0-py2.py3-none-any.whl.metadata (9.2 kB)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy->onnxruntime>=1.14.1->chromadb) (1.3.0)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (0.6.1)\n",
            "Downloading chromadb-1.0.12-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.3/19.3 MB\u001b[0m \u001b[31m109.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading fastapi-0.115.9-py3-none-any.whl (94 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m94.9/94.9 kB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading faiss_cpu-1.11.0-cp311-cp311-manylinux_2_28_x86_64.whl (31.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m31.3/31.3 MB\u001b[0m \u001b[31m67.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langchain_openai-0.3.21-py3-none-any.whl (65 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.2/65.2 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langchain_community-0.3.24-py3-none-any.whl (2.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.5/2.5 MB\u001b[0m \u001b[31m68.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading bcrypt-4.3.0-cp39-abi3-manylinux_2_34_x86_64.whl (284 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m284.2/284.2 kB\u001b[0m \u001b[31m25.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dataclasses_json-0.6.7-py3-none-any.whl (28 kB)\n",
            "Downloading httpx_sse-0.4.0-py3-none-any.whl (7.8 kB)\n",
            "Downloading kubernetes-32.0.1-py2.py3-none-any.whl (2.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m88.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langchain_core-0.3.64-py3-none-any.whl (438 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m438.1/438.1 kB\u001b[0m \u001b[31m37.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langsmith-0.3.45-py3-none-any.whl (363 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.0/363.0 kB\u001b[0m \u001b[31m34.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading mmh3-5.1.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (101 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.6/101.6 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading onnxruntime-1.22.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (16.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.4/16.4 MB\u001b[0m \u001b[31m113.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading opentelemetry_api-1.34.0-py3-none-any.whl (65 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.8/65.8 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading opentelemetry_exporter_otlp_proto_grpc-1.34.0-py3-none-any.whl (18 kB)\n",
            "Downloading opentelemetry_exporter_otlp_proto_common-1.34.0-py3-none-any.whl (18 kB)\n",
            "Downloading opentelemetry_proto-1.34.0-py3-none-any.whl (55 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m55.7/55.7 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading opentelemetry_instrumentation_fastapi-0.55b0-py3-none-any.whl (12 kB)\n",
            "Downloading opentelemetry_instrumentation-0.55b0-py3-none-any.whl (31 kB)\n",
            "Downloading opentelemetry_instrumentation_asgi-0.55b0-py3-none-any.whl (16 kB)\n",
            "Downloading opentelemetry_semantic_conventions-0.55b0-py3-none-any.whl (196 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m196.2/196.2 kB\u001b[0m \u001b[31m20.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading opentelemetry_util_http-0.55b0-py3-none-any.whl (7.3 kB)\n",
            "Downloading opentelemetry_sdk-1.34.0-py3-none-any.whl (118 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m118.4/118.4 kB\u001b[0m \u001b[31m11.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading overrides-7.7.0-py3-none-any.whl (17 kB)\n",
            "Downloading posthog-4.4.0-py2.py3-none-any.whl (98 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 kB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydantic_settings-2.9.1-py3-none-any.whl (44 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading backoff-2.2.1-py3-none-any.whl (15 kB)\n",
            "Downloading durationpy-0.10-py3-none-any.whl (3.9 kB)\n",
            "Downloading httptools-0.6.4-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (459 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m459.8/459.8 kB\u001b[0m \u001b[31m40.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading marshmallow-3.26.1-py3-none-any.whl (50 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.9/50.9 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading python_dotenv-1.1.0-py3-none-any.whl (20 kB)\n",
            "Downloading starlette-0.45.3-py3-none-any.whl (71 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m71.5/71.5 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading typing_inspect-0.9.0-py3-none-any.whl (8.8 kB)\n",
            "Downloading uvloop-0.21.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.0/4.0 MB\u001b[0m \u001b[31m120.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchfiles-1.0.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (454 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m454.8/454.8 kB\u001b[0m \u001b[31m39.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading coloredlogs-15.0.1-py2.py3-none-any.whl (46 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading asgiref-3.8.1-py3-none-any.whl (23 kB)\n",
            "Downloading humanfriendly-10.0-py2.py3-none-any.whl (86 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.8/86.8 kB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading mypy_extensions-1.1.0-py3-none-any.whl (5.0 kB)\n",
            "Building wheels for collected packages: wikipedia, pypika\n",
            "  Building wheel for wikipedia (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wikipedia: filename=wikipedia-1.4.0-py3-none-any.whl size=11678 sha256=6c7a09a651c2dd4ca3325ee47b214289eac5488ee3902ae39d0eb6c77583e2b7\n",
            "  Stored in directory: /root/.cache/pip/wheels/8f/ab/cb/45ccc40522d3a1c41e1d2ad53b8f33a62f394011ec38cd71c6\n",
            "  Building wheel for pypika (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pypika: filename=pypika-0.48.9-py2.py3-none-any.whl size=53803 sha256=da44a2fe2b86442f653d8d81c0113d6d9b8957f30e075ad86b5545e79951b220\n",
            "  Stored in directory: /root/.cache/pip/wheels/a3/01/bd/4c40ceb9d5354160cb186dcc153360f4ab7eb23e2b24daf96d\n",
            "Successfully built wikipedia pypika\n",
            "Installing collected packages: pypika, durationpy, uvloop, python-dotenv, overrides, opentelemetry-util-http, opentelemetry-proto, mypy-extensions, mmh3, marshmallow, humanfriendly, httpx-sse, httptools, faiss-cpu, bcrypt, backoff, asgiref, wikipedia, watchfiles, typing-inspect, starlette, posthog, opentelemetry-exporter-otlp-proto-common, opentelemetry-api, coloredlogs, pydantic-settings, opentelemetry-semantic-conventions, onnxruntime, langsmith, kubernetes, fastapi, dataclasses-json, opentelemetry-sdk, opentelemetry-instrumentation, langchain-core, opentelemetry-instrumentation-asgi, opentelemetry-exporter-otlp-proto-grpc, langchain_openai, opentelemetry-instrumentation-fastapi, langchain-community, chromadb\n",
            "  Attempting uninstall: starlette\n",
            "    Found existing installation: starlette 0.46.2\n",
            "    Uninstalling starlette-0.46.2:\n",
            "      Successfully uninstalled starlette-0.46.2\n",
            "  Attempting uninstall: langsmith\n",
            "    Found existing installation: langsmith 0.3.44\n",
            "    Uninstalling langsmith-0.3.44:\n",
            "      Successfully uninstalled langsmith-0.3.44\n",
            "  Attempting uninstall: fastapi\n",
            "    Found existing installation: fastapi 0.115.12\n",
            "    Uninstalling fastapi-0.115.12:\n",
            "      Successfully uninstalled fastapi-0.115.12\n",
            "  Attempting uninstall: langchain-core\n",
            "    Found existing installation: langchain-core 0.3.63\n",
            "    Uninstalling langchain-core-0.3.63:\n",
            "      Successfully uninstalled langchain-core-0.3.63\n",
            "Successfully installed asgiref-3.8.1 backoff-2.2.1 bcrypt-4.3.0 chromadb-1.0.12 coloredlogs-15.0.1 dataclasses-json-0.6.7 durationpy-0.10 faiss-cpu-1.11.0 fastapi-0.115.9 httptools-0.6.4 httpx-sse-0.4.0 humanfriendly-10.0 kubernetes-32.0.1 langchain-community-0.3.24 langchain-core-0.3.64 langchain_openai-0.3.21 langsmith-0.3.45 marshmallow-3.26.1 mmh3-5.1.0 mypy-extensions-1.1.0 onnxruntime-1.22.0 opentelemetry-api-1.34.0 opentelemetry-exporter-otlp-proto-common-1.34.0 opentelemetry-exporter-otlp-proto-grpc-1.34.0 opentelemetry-instrumentation-0.55b0 opentelemetry-instrumentation-asgi-0.55b0 opentelemetry-instrumentation-fastapi-0.55b0 opentelemetry-proto-1.34.0 opentelemetry-sdk-1.34.0 opentelemetry-semantic-conventions-0.55b0 opentelemetry-util-http-0.55b0 overrides-7.7.0 posthog-4.4.0 pydantic-settings-2.9.1 pypika-0.48.9 python-dotenv-1.1.0 starlette-0.45.3 typing-inspect-0.9.0 uvloop-0.21.0 watchfiles-1.0.5 wikipedia-1.4.0\n"
          ]
        }
      ],
      "source": [
        "!pip install langchain chromadb faiss-cpu openai tiktoken langchain_openai langchain-community wikipedia"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Chunking"
      ],
      "metadata": {
        "id": "2lEjhiA81AU5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F5FTuuxy-tjx",
        "outputId": "d960862a-f2c9-4c16-9ec6-a825450de482"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created 324 chunks \n",
            "Chunk 1:\n",
            "প্রস্তাবনা\n",
            "আমরা, বাংলাদেশের জনগণ , ১৯৭১ সালের ২৬শে মার্চ স্বাধীনতা ঘোষণা করে জাতীয় মুক্তির ঐতিহাসিক সংগ্রামের মাধ্যমে স্বাধীন ও সার্বভৌম গণপ্রজাতন্ত্রী বাংলাদেশ প্রতিষ্ঠা করেছি।\n",
            "\n",
            "Chunk 2:\n",
            "আমরা অঙ্গীকার করছি, সেই সব মহান আদর্শ—যেগুলো আমাদের সাহসী জনগণকে জাতীয় মুক্তি সংগ্রামে আত্মনিয়োগ করতে এবং অনেক বীর শহীদকে জীবন উৎসর্গ করতে অনুপ্রাণিত করেছিল—যেমন: জাতীয়তাবাদ, সমাজতন্ত্র, গণতন্ত্র ও ধর্মনিরপেক্ষতা—এই আদর্শগুলোই হবে এই সংবিধানের মূলনীতি।\n",
            "\n",
            "Chunk 3:\n",
            "আমরা আরও অঙ্গীকার করছি, আমাদের রাষ্ট্রের অন্যতম লক্ষ্য হবে গণতান্ত্রিক পদ্ধতিতে একটি শোষণমুক্ত সমাজতান্ত্রিক সমাজ গঠন, যেখানে আইনের শাসন, মৌলিক মানবাধিকার এবং রাজনৈতিক, অর্থনৈতিক ও সামাজিক সমতা, স্বাধীনতা ও ন্যায্যতা সব নাগরিকের জন্য নিশ্চিত করা হবে।\n",
            "\n",
            "Chunk 4:\n",
            "আমরা জোর দিয়ে ঘোষণা করছি, যেন আমরা স্বাধীন জাতি হিসেবে উন্নতি করতে পারি এবং মানবজাতির অগ্রগতিশীল আশা ও আকাঙ্ক্ষার সঙ্গে সঙ্গতি রেখে আন্তর্জাতিক শান্তি ও সহযোগিতায় সম্পূর্ণ ভূমিকা রাখতে পারি, সে উদ্দেশ্যে এই সংবিধানের শ্রেষ্ঠত্ব বজায় রাখা এবং একে রক্ষা, সমর্থন ও নিরাপত্তা দেওয়া আমাদের পবিত্র দায়িত্ব।\n",
            "\n",
            "Chunk 5:\n",
            "এই কারণে, আজ ১৩৭৯ বঙ্গাব্দের ১৮ই কার্তিক, মোতাবেক ১৯৭২ খ্রিস্টাব্দের ৪ঠা নভেম্বর, আমরা গণপরিষদে একত্রিত হয়ে এই সংবিধান রচনা ও আইন আকারে গ্রহণ করলাম।\n",
            "\n",
            "Chunk 6:\n",
            "১। প্রজাতন্ত্র\n",
            "বাংলাদেশ একটি একক (একটি রাষ্ট্রে বিভক্ত নয়), স্বাধীন (কারও অধীন নয়) এবং সর্বভৌম (নিজ সিদ্ধান্তে চলা) প্রজাতন্ত্র। এই দেশের নাম হবে “গণপ্রজাতন্ত্রী বাংলাদেশ”।\n",
            "\n",
            "Chunk 7:\n",
            "২। প্রজাতন্ত্রের সীমানা\n",
            "বাংলাদেশ রাষ্ট্রের সীমানার মধ্যে অন্তর্ভুক্ত থাকবে:\n",
            "(ক) ১৯৭১ সালের ২৬শে মার্চ (স্বাধীনতা ঘোষণার আগে) পর্যন্ত পূর্ব পাকিস্তানের যেসব এলাকা ছিল, এবং\n",
            "১৯৭৪ সালের সংবিধানের তৃতীয় সংশোধনীর মাধ্যমে যেসব নতুন এলাকা যুক্ত হয়েছে,\n",
            "তবে ওই সংশোধনী অনুযায়ী যেসব এলাকা \"বহির্ভূত\" বলা হয়েছে, সেগুলো এই সীমানায় ধরার কথা না।\n",
            "\n",
            "Chunk 8:\n",
            "(খ) ভবিষ্যতে যদি বাংলাদেশের সাথে নতুন কোনো এলাকা যুক্ত হয়, সেটাও এই সীমানার মধ্যে পড়ে যাবে।\n",
            "\n",
            "Chunk 9:\n",
            "২(ক)। রাষ্ট্রধর্ম\n",
            "বাংলাদেশের রাষ্ট্রধর্ম হলো ইসলাম।তবে হিন্দু, বৌদ্ধ, খ্রিস্টানসহ সব ধর্মের মানুষ যাতে সমান মর্যাদা ও অধিকার নিয়ে নিজের ধর্ম পালন করতে পারে, রাষ্ট্র তা নিশ্চিত করবে।\n",
            "\n",
            "৩। রাষ্ট্রভাষা\n",
            "বাংলাদেশের রাষ্ট্রভাষা হবে বাংলা।\n",
            "\n",
            "Chunk 10:\n",
            "৪। জাতীয় সঙ্গীত, পতাকা ও প্রতীক\n",
            "(১) বাংলাদেশের জাতীয় সঙ্গীত হলো —\n",
            "“আমার সোনার বাংলা” গানটির প্রথম ১০টি লাইন।\n",
            "(২) জাতীয় পতাকার বর্ণনা:\n",
            "সবুজ রঙের পটভূমিতে একটি লাল বৃত্ত (রক্তরঙের পূর্ণ গোল)।\n",
            "(৩) জাতীয় প্রতীকের বর্ণনা:\n",
            "পানির উপর ভাসছে জাতীয় ফুল শাপলা।চারপাশে ঘিরে আছে ধানের শীষ।উপরে আছে তিনটি পাটপাতা এবং দুই পাশে দুটি তারা (তারকা)।\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
        "\n",
        "# Load the text file\n",
        "file_path = \"constitution.txt\"  # Replace with your actual file path\n",
        "with open(file_path, \"r\", encoding=\"utf-8\") as file:\n",
        "    text = file.read()\n",
        "#print(text)\n",
        "# Initialize the text splitter\n",
        "text_splitter = RecursiveCharacterTextSplitter(\n",
        "    chunk_size=400,       # max characters per chunk\n",
        "    chunk_overlap=70  ,    # overlap between chunks to preserve context\n",
        "    separators=[\"\\n\\n\", \"\\n\", \"।\", \".\", \" \"]\n",
        ")\n",
        "\n",
        "# Split the text (pass the variable, not a string)\n",
        "chunks = text_splitter.split_text(text)\n",
        "print(f\"Created {len(chunks)} chunks \")\n",
        "# Print the chunks\n",
        "for i, chunk in enumerate(chunks[:10]):\n",
        "    print(f\"Chunk {i+1}:\\n{chunk}\\n\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Vector Embedding"
      ],
      "metadata": {
        "id": "hQIfUhqh1EQt"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oV-3Z7UO-yJ2"
      },
      "outputs": [],
      "source": [
        "from sentence_transformers import SentenceTransformer, LoggingHandler, models, evaluation, losses, util\n",
        "from torch.utils.data import DataLoader\n",
        "from sentence_transformers.datasets import ParallelSentencesDataset\n",
        "import logging\n",
        "import os\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "class BanglaSentenceTransformerSmall:\n",
        "    def __init__(self, model_name='intfloat/multilingual-e5-large'):\n",
        "        \"\"\"Initialize the model once\"\"\"\n",
        "        self.model = SentenceTransformer(model_name)\n",
        "    def encode(self, sentences):\n",
        "        \"\"\"Encode a list of sentences\"\"\"\n",
        "        sentence_embeddings = self.model.encode(sentences)\n",
        "        return dict(zip(sentences, sentence_embeddings))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478,
          "referenced_widgets": [
            "47915ae631cd4dc3a8c088c24900a928",
            "98642ccb87e44b69a25c00f504c54462",
            "cce8cb7ae4c7420ab7a977a84f99f3bb",
            "9019a00cbf914f008fb7448523e90d02",
            "aa961d25a65f400d84eb7cba0935f99e",
            "2bcc59f57c354827b3ece596183d2db6",
            "f0c444461968412fbc12b38d436c22ab",
            "d98e2638f1254f48b940d12b113cb5fd",
            "a46225954b4041dcbd03f265df026d6b",
            "eadead3fca8c4cf4bfaa6928874b7805",
            "e39d420797344e06a03413e2f13c3d8f",
            "41e15d95d1b14334a4928717db6c17a6",
            "966f323dba344f03ade85f13cb0396ba",
            "fe08acd7645649aeb7c5f1a8621635a8",
            "e9a9d233fc894b3bb942b4c3ae366a4d",
            "2e6da1bf336d44048ac3c367e2b146f9",
            "0ab65ca229ea4152981d48c3b3595f22",
            "e7850859783e49c184f7c4c89ca7a120",
            "7bda556c19564f11b422cfb72f3adf39",
            "56608329e482415f8bfffb104c3f7540",
            "e36cc75a75e84cecb3d4c014aaebe3e0",
            "309b310fa5e14fe3a404815b5514ce79",
            "8ae29511c15748099075f1d73ffab64b",
            "1b0ad94664584fc49cfdd83305a420e8",
            "2fa4e3d21f254bd98288cdaec5d587c0",
            "b2bcc5137e68406b8a08497c3f47fb1e",
            "0e434dde6cfa4ce8acdd30629b8d5bf9",
            "fa9c6ca89dcd4d6a8d61473f9c5ef0a8",
            "f465d650828f48d4b3091bf90bf57415",
            "cf00e92c13d54184a229b4fd61d146ae",
            "064d0c7ee013411983901a17c1d03651",
            "81fd1bb8a9264ed396fc6d416e5fa55a",
            "3b017472c7174b8cbbbfd44dae6acbc4",
            "702c5c195f594b94865f83aa9f6ba405",
            "ffcf1263aeab4a47b63d26838a069fb8",
            "5e4ec29b934840e3bd680c7a618231d3",
            "e0f29bd1b69144eb887abed541d79dc1",
            "8656c4013b6f4ce4bbf255847aac4c8b",
            "c78f1cbe3c0946a48830f0d5a27b017b",
            "eae05dafde8f4f2b88902f793dcd0abd",
            "7af8d9acfab54c518fd99cc15842a3b0",
            "3e790a97045348f6a3c11534da50bfb4",
            "5131b883471f48bca159b91f33fdf1c4",
            "4066b0d5138d45b09350a8a3ddbb0607",
            "6c7665ba5ff84e6199501bd811c59318",
            "b51e19ae9abe4f7d8e52e6e355543633",
            "78befb93e9954af6b5adca3bbdfb3c4e",
            "1fbdd47fa6e543d9983eda4696c895ec",
            "acf9e85602ba4ce2af6f616d84843a68",
            "e4d0b1a3fed2434e8f8498817f37d8a0",
            "ef14016f27114ec8965de5e9b3f958bc",
            "68dac05b433e40e7a7aaf4efd603b2bc",
            "635f412160124ca5be6b1ada24231725",
            "bde5dbb6c5a2425a8c6ee32d595f3687",
            "13f202f8a6214e2bac365e766a562829",
            "a046224c62c64b96ba0bfbb08ce1a777",
            "e06e56b9521146a7b37b72d5bda4652e",
            "bb7b8f6fc5a94fcdb83e707e5b5303f4",
            "ffed2db81e034e7088bcccc0b127b94e",
            "f063ee6d9c0344a4adb80e616f88f35d",
            "3aed92de4ecb4fb2bb540c97a3f5357f",
            "08a18ce363bc49c58adb0030e371ded0",
            "8b708dffec514aed8e63b3099936e6f1",
            "94ed30c4531f458bb66d4d3ceb7a1c13",
            "651451d2d6ae40a89ad2855c3c65420e",
            "f5f179fb8319484cb6b1cc91a0f4aa52",
            "66a95333808b4e74b897483cf7bd5081",
            "6ec6646d8c8240399b51d65027bf1b85",
            "05c7460beefb478d929b69de1a0cbd59",
            "0fdb7fb6f5c64734b2121ec11ffc8f1c",
            "36bae468e70b41b2b899dc0571c65673",
            "e0828a8eaa9d456c88eaf6bf77f95d43",
            "3fcc3aa8ae2b40b68392d8f97f2170d2",
            "467781b5026b4a45b3c9cecb09998591",
            "571819fb9bb24c45905b9f9104ac20b3",
            "ec29b7e2bf2e4632996d8bbfbee8b90a",
            "583b4c71b6f24bbdbe99db91f2e093ac",
            "e865d6d111dc434fae591aeee89e314d",
            "3ca7d63aee4e45cb9a9f62eb7bca3d6c",
            "b925d839a18a41db92e196269fb7a9f5",
            "ca28858de85e496cb640fdf3d131cbf7",
            "de96d0bdc5ee4b43a2d3955718b31204",
            "9d290870c9d741b593dc2a0f12345c3e",
            "b608cd7eaca44def842097a25e03da00",
            "e036cec5b15048bcba6515072d4a86f2",
            "84aa755ac0314f94bec193121daa7795",
            "08f9dfef23f843d7977682bbdb8b4382",
            "6d52d9c69b1a4c9e90cde6b44d3c8e61",
            "798cf6328cea4ee4934f6b287ca7f999",
            "b39df25903ad40f5b465971f24ae7663",
            "d363b76794c7460f833b6205f3267597",
            "d0577b9a4a4e49c39a8e51aa59d94909",
            "29874b647005472cbd4040fad962a2b1",
            "03002e649cc74b8093a9a1f666761c8d",
            "9b4c6e2c82cf4d6cb9f69cb59c67c08a",
            "305f828ce9234158bf4480dcd74c2205",
            "a65778e73295487e9fabda910e1f4412",
            "29220a0c963f42a280a2502b5c243d6e",
            "b1c042d7ca3e40e7b0273c900702d82b",
            "2bd9b9b58b754d2386b1eee080400222",
            "194b8b8d05fe4ca4b90329fd59e15f69",
            "3b03f8c474a64f4ca8e65552d03b3254",
            "e94beb9f73a249d4af556fce7c0c01be",
            "e1285c9aac394fdda1bcdd6b671e1e91",
            "bae4c63fbc0c4b9d8a351bea2f66c1f9",
            "cd5d7ae9363140cf91469a7c805bfb72",
            "025f7683f545493588c2319e3b1dc86e",
            "25f258e648274fedb98be24281a2d3c0",
            "0fcec56aa35f4550aa9874e0c9a82b32",
            "8071e8ee7ea2461486a986226e2df10a"
          ]
        },
        "id": "VxOQO60C-0Bo",
        "outputId": "5a585b45-efea-48e5-f4c9-b71a60a0d554"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "modules.json:   0%|          | 0.00/387 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "47915ae631cd4dc3a8c088c24900a928"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "README.md:   0%|          | 0.00/160k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "41e15d95d1b14334a4928717db6c17a6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sentence_bert_config.json:   0%|          | 0.00/57.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8ae29511c15748099075f1d73ffab64b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/690 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "702c5c195f594b94865f83aa9f6ba405"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/2.24G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6c7665ba5ff84e6199501bd811c59318"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/418 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a046224c62c64b96ba0bfbb08ce1a777"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sentencepiece.bpe.model:   0%|          | 0.00/5.07M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "66a95333808b4e74b897483cf7bd5081"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/17.1M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "e865d6d111dc434fae591aeee89e314d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/280 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "798cf6328cea4ee4934f6b287ca7f999"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/201 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2bd9b9b58b754d2386b1eee080400222"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stored 324 chunks in Chroma vector store.\n"
          ]
        }
      ],
      "source": [
        "from langchain.docstore.document import Document\n",
        "import chromadb\n",
        "from langchain.embeddings import SentenceTransformerEmbeddings\n",
        " # Assuming this is your custom class\n",
        "\n",
        "# 1. Initialize the Bangla Sentence Transformer\n",
        "model = BanglaSentenceTransformerSmall()\n",
        "\n",
        "# 2. Encode the chunks\n",
        "embeddings_dict = model.encode(chunks)\n",
        "\n",
        "# 3. Prepare documents with the chunk text\n",
        "documents = [Document(page_content=chunk) for chunk in embeddings_dict.keys()]\n",
        "\n",
        "# 4. Set up ChromaDB client\n",
        "client = chromadb.Client()\n",
        "\n",
        "# 5. Try to get the collection if it already exists\n",
        "collection_name = \"bangla_embeddings\"\n",
        "try:\n",
        "    collection = client.get_collection(collection_name)\n",
        "except Exception as e:\n",
        "    # If collection doesn't exist, create it\n",
        "    collection = client.create_collection(collection_name)\n",
        "\n",
        "# 6. Add the sentence embeddings to ChromaDB collection\n",
        "for idx, (sentence, embedding) in enumerate(embeddings_dict.items()):\n",
        "    # Ensure idx is defined within the loop, no error in 'for' loop\n",
        "    collection.add(\n",
        "        ids=[f\"doc_{idx}\"],             # Unique ID for each document\n",
        "        documents=[sentence],           # The sentence content\n",
        "        metadatas=[{\"source\": \"constitution\"}],  # Added a key-value pair for metadata\n",
        "        embeddings=[embedding]          # The corresponding embedding\n",
        "    )\n",
        "#client.persist()\n",
        "\n",
        "print(f\"Stored {len(chunks)} chunks in Chroma vector store.\")\n",
        "\n",
        "#print(f\"Stored {len(chunks)} chunks in Chroma vector store.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jLHPa2ntBAkC"
      },
      "outputs": [],
      "source": [
        "from chromadb.config import Settings\n",
        "client = chromadb.PersistentClient(path=\"my_chroma_db\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Example of Retrieval"
      ],
      "metadata": {
        "id": "-_q8yFOu1JEE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6mXPNnx1BFDt",
        "outputId": "821c6923-76ee-4639-cf3b-414cbf7873b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Document: ৭ক। সংবিধান বাতিল, স্থগিতকরণ, রাষ্ট্রদ্রোহিতা ইত্যাদি অপরাধ :\n",
            "১। কেউ যদি শক্তি ব্যবহার করে, বা অন্য কোনো বেআইনি উপায়ে—\n",
            "এই সংবিধান বা এর কোনো অংশ বাতিল বা স্থগিত করে, বা সেটা করার চেষ্টা করে বা ষড়যন্ত্র করে, বা জনগণের মধ্যে সংবিধানের প্রতি বিশ্বাস কমানোর চেষ্টা করে—\n",
            "তাহলে সেটি রাষ্ট্রদ্রোহিতা হিসেবে গণ্য হবে। সেই ব্যক্তি রাষ্ট্রদ্রোহের অপরাধে অপরাধী বলে ধরা হবে।\n",
            "Similarity Score: 0.3422\n",
            "\n",
            "Document: দ্বিতীয় ভাগ, রাষ্ট্র পরিচালনার মূলনীতি\n",
            "(৮ )(১) জাতীয়তাবাদ, সমাজতন্ত্র, গণতন্ত্র ও ধর্মনিরপেক্ষতা - এই নীতিসমূহ এবং এদের থেকে উদ্ভূত অন্যান্য নীতিসমূহ রাষ্ট্র পরিচালনার মূলনীতি হিসেবে গণ্য হবে।\n",
            "Similarity Score: 0.3931\n",
            "\n",
            "Document: ধর্ম, প্রভৃতি কারণে বৈষম্য\n",
            "২৮।(১) কোনো নাগরিকের প্রতি কেবল ধর্ম, গোষ্ঠী, বর্ণ, লিঙ্গ বা জন্মস্থানের কারণে রাষ্ট্র বৈষম্য করবে না।\n",
            "(২) রাষ্ট্র ও সমাজের সব স্তরে নারী ও পুরুষের সমান অধিকার নিশ্চিত করবে।\n",
            "(৩) ধর্ম, গোষ্ঠী, বর্ণ, লিঙ্গ বা জন্মস্থানের কারণে কোনো নাগরিককে বিনোদন বা বিশ্রামের স্থানে প্রবেশ বা শিক্ষা প্রতিষ্ঠানে ভর্তিতে কোনো বাধা, শর্ত বা অযোগ্যতা দেওয়া যাবে না।\n",
            "Similarity Score: 0.3971\n",
            "\n"
          ]
        }
      ],
      "source": [
        "query = \"কখন রাষ্ট্রদ্রোহিতা হবে?\"\n",
        "query_embedding = model.encode([query])[query]  # Get the embedding\n",
        "\n",
        "results = collection.query(\n",
        "    query_embeddings=[query_embedding],\n",
        "    n_results=3,\n",
        "    include=[\"documents\", \"distances\"]  # Important: request distances\n",
        ")\n",
        "\n",
        "# Display each result with its similarity score\n",
        "for doc, score in zip(results['documents'][0], results['distances'][0]):\n",
        "    print(f\"Document: {doc}\")\n",
        "    print(f\"Similarity Score: {score:.4f}\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Query Re-writting"
      ],
      "metadata": {
        "id": "1tx3r1tx1Rns"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "COb24mAuGlE7",
        "outputId": "a2199bad-53e0-4478-fd0d-620fc291af43"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "মূল প্রশ্ন: বাংলাদেশের সংবিধানে মৌলিক অধিকার কী কী?\n",
            "পুনর্লিখিত প্রশ্ন: বাংলাদেশের সংবিধানে মৌলিক অধিকার কী কী উল্লেখিত?\n",
            "\n",
            "মূল প্রশ্ন: সংবিধানের ৭ নং অনুচ্ছেদে কী বলা আছে?\n",
            "পুনর্লিখিত প্রশ্ন: সংবিধানের ৭ নং অনুচ্ছেদে কী বলা আছে?\n",
            "\n",
            "মূল প্রশ্ন: ভোটের অধিকার সম্পর্কে সংবিধানে কী আছে?\n",
            "পুনর্লিখিত প্রশ্ন: ভোটের অধিকার সম্পর্কে সংবিধানে কী উল্লেখিত?\n",
            "\n",
            "মূল প্রশ্ন: আপীল  বিভাগের কাজ  কী  বিস্তারিত বল \n",
            "পুনর্লিখিত প্রশ্ন: আপীল বিভাগের কাজ কী? সংবিধানে আপীল বিভাগের কর্মকাণ্ড এবং দায়িত্ব কী কী অন্তর্ভুক্ত আছে?\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import openai\n",
        "from openai import OpenAI\n",
        "\n",
        "# Initialize the OpenAI client (replace with your API key)\n",
        "client = OpenAI(api_key=\"\")\n",
        "def rewrite_query(query: str, model: str = \"gpt-3.5-turbo-0125\") -> str:\n",
        "    \"\"\"\n",
        "    বাংলা ভাষায় প্রশ্ন পুনর্লিখন করে যাতে এটি বাংলাদেশের সংবিধানের জন্য RAG-ভিত্তিক QA সিস্টেমের জন্য আরও সুনির্দিষ্ট হয়।\n",
        "\n",
        "    Args:\n",
        "        query (str): ব্যবহারকারীর মূল প্রশ্ন বাংলায়।\n",
        "        model (str): OpenAI মডেলের নাম (ডিফল্ট: gpt-3.5-turbo)।\n",
        "\n",
        "    Returns:\n",
        "        str: পুনর্লিখিত প্রশ্ন।\n",
        "    \"\"\"\n",
        "    # Define a prompt in Bangla\n",
        "    prompt = (\n",
        "        \"আপনি বাংলাদেশের সংবিধানের একজন বিশেষজ্ঞ। নিম্নলিখিত বাংলা প্রশ্নটিকে আরও সুনির্দিষ্ট, পরিষ্কার এবং সংবিধানের প্রাসঙ্গিক অনুচ্ছেদ বা ধারা পুনরুদ্ধারের জন্য উপযুক্ত করে পুনর্লিখন করুন। \"\n",
        "        \"পুনর্লিখিত প্রশ্নটি বাংলায় হতে হবে, মূল উদ্দেশ্য বজায় রাখতে হবে এবং সংবিধানের মূল শব্দ বা ধারণার উপর ফোকাস করতে হবে। যদি প্রশ্নের শেষে '?' না থাকে তবে তা যুক্ত করুন,প্রশ্নের অর্থ বজায় রাখুন, অতিরিক্ত কিছু যোগ করবেন না   \"\n",
        "        \"মূল প্রশ্ন: {}\\nপুনর্লিখিত প্রশ্ন: \"\n",
        "    ).format(query)\n",
        "\n",
        "    try:\n",
        "        # Call ChatGPT API\n",
        "        response = client.chat.completions.create(\n",
        "            model=model,\n",
        "            messages=[\n",
        "                {\"role\": \"system\", \"content\": \"আপনি একজন বাংলাদেশের সংবিধান বিশেষজ্ঞ।স্পষ্ট প্রশ্ন তৈরি করুন বাংলায়  ।\"},\n",
        "                {\"role\": \"user\", \"content\": prompt}\n",
        "            ],\n",
        "            max_tokens=150,\n",
        "            temperature=0.2\n",
        "        )\n",
        "\n",
        "        # Extract the rewritten query\n",
        "        rewritten_query = response.choices[0].message.content.strip()\n",
        "\n",
        "        # Remove the prefix if present\n",
        "        prefix = \"পুনর্লিখিত প্রশ্ন: \"\n",
        "        if rewritten_query.startswith(prefix):\n",
        "            rewritten_query = rewritten_query[len(prefix):].strip()\n",
        "\n",
        "        return rewritten_query\n",
        "\n",
        "    except Exception as e:\n",
        "        return f\"Error rewriting query: {str(e)}\"\n",
        "\n",
        "# Example usage\n",
        "if __name__ == \"__main__\":\n",
        "    # Sample Bangla queries\n",
        "    sample_queries = [\n",
        "        \"বাংলাদেশের সংবিধানে মৌলিক অধিকার কী কী?\",\n",
        "        \"সংবিধানের ৭ নং অনুচ্ছেদে কী বলা আছে?\",\n",
        "        \"ভোটের অধিকার সম্পর্কে সংবিধানে কী আছে?\",\n",
        "        \"আপীল  বিভাগের কাজ  কী  বিস্তারিত বল \"\n",
        "    ]\n",
        "\n",
        "    for query in sample_queries:\n",
        "        rewritten = rewrite_query(query, model=\"gpt-3.5-turbo-0125\")\n",
        "        print(f\"মূল প্রশ্ন: {query}\")\n",
        "        print(f\"পুনর্লিখিত প্রশ্ন: {rewritten}\\n\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Query Classification"
      ],
      "metadata": {
        "id": "E3Nv0dXI1W9F"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "85_q2JpxMU5b",
        "outputId": "7a9fb675-fb20-41c6-c885-46b3a6fbc020"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "প্রশ্ন: বাংলাদেশের সংবিধানে মৌলিক অধিকার কী কী?\n",
            "শ্রেণীবদ্ধকরণ: ফ্যাক্টয়েড\n",
            "প্রশ্ন: সংবিধানের ৭ নং অনুচ্ছেদে কী বলা আছে?\n",
            "শ্রেণীবদ্ধকরণ: ফ্যাক্টয়েড\n",
            "প্রশ্ন: ভোটের অধিকার সম্পর্কে সংবিধানে কী আছে?\n",
            "শ্রেণীবদ্ধকরণ: ফ্যাক্টয়েড\n",
            "প্রশ্ন: সংবিধানে অধিকার কী?\n",
            "শ্রেণীবদ্ধকরণ: ফ্যাক্টয়েড\n",
            "প্রশ্ন: ১৫তম সংশোধনীতে ভোটের অধিকারে কী পরিবর্তন হয়েছে?\n",
            "শ্রেণীবদ্ধকরণ: ফ্যাক্টয়েড\n",
            "প্রশ্ন: বাংলাদেশের সংবিধানে অধিকার কী?\n",
            "শ্রেণীবদ্ধকরণ: ফ্যাক্টয়েড\n",
            "প্রশ্ন: সংবিধানে নাগরিকদের স্বাধীনতা কীভাবে সুরক্ষিত হয়?\n",
            "শ্রেণীবদ্ধকরণ: বর্ণনামূলক\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import openai\n",
        "from openai import OpenAI\n",
        "\n",
        "# Initialize the OpenAI client (replace with your API key)\n",
        "#client = OpenAI(api_key=\"YOUR_OPENAI_API_KEY\")\n",
        "\n",
        "def classify_question(question: str, model: str = \"gpt-3.5-turbo-0125\") -> dict:\n",
        "    \"\"\"\n",
        "    বাংলা ভাষায় একটি প্রশ্নকে ফ্যাক্টয়েড বা বর্ণনামূলক হিসেবে শ্রেণীবদ্ধ করে, বাংলাদেশের সংবিধানের প্রেক্ষাপটে।\n",
        "\n",
        "    Args:\n",
        "        question (str): ব্যবহারকারীর প্রশ্ন বাংলায়।\n",
        "        model (str): OpenAI মডেলের নাম (ডিফল্ট: gpt-3.5-turbo)।\n",
        "\n",
        "    Returns:\n",
        "        dict: শ্রেণীবদ্ধকরণ ('ফ্যাক্টয়েড' বা 'বর্ণনামূলক') ।\n",
        "    \"\"\"\n",
        "    # Define a prompt in Bangla\n",
        "    prompt = (\n",
        "        \"আপনি বাংলাদেশের সংবিধানের একজন বিশেষজ্ঞ। নিম্নলিখিত বাংলা প্রশ্নটিকে 'ফ্যাক্টয়েড' বা 'বর্ণনামূলক' হিসেবে শ্রেণীবদ্ধ করুন। \"\n",
        "        \"ফ্যাক্টয়েড প্রশ্নগুলো সুনির্দিষ্ট,  সংক্ষিপ্ত, সরাসরি উত্তরযোগ্য । \"\n",
        "        \"বর্ণনামূলক প্রশ্নগুলো ব্যাখ্যা বা বিশ্লেষণের প্রয়োজন, অথবা সংশোধনী বা ঐতিহাসিক প্রেক্ষাপট জড়িত। \"\n",
        "        \"যদি প্রশ্নের শেষে '?' না থাকে, তবে '?' যুক্ত করুন । \"\n",
        "        \"শ্রেণীবদ্ধকরণ সঠিক হতে হবে  \"\n",
        "        \"উত্তরে শুধুমাত্র শ্রেণীবদ্ধকরণ ('ফ্যাক্টয়েড' বা 'বর্ণনামূলক') । \"\n",
        "        \"উত্তর ফরম্যাট: \\nশ্রেণীবদ্ধকরণ: [ফ্যাক্টয়েড/বর্ণনামূলক]\\n\"\n",
        "        \"প্রশ্ন: {}\"\n",
        "    ).format(question)\n",
        "\n",
        "    try:\n",
        "        # Call ChatGPT API\n",
        "        response = client.chat.completions.create(\n",
        "            model=model,\n",
        "            messages=[\n",
        "                {\"role\": \"system\", \"content\": \"আপনি একজন বাংলাদেশের সংবিধান বিশেষজ্ঞ। সব উত্তর বাংলায়, সঠিক এবং সম্পূর্ণ বাক্যে হতে হবে।যদি প্রশ্নের শেষে '?' না থাকে, তবে '?' যুক্ত করুন । \"},\n",
        "                {\"role\": \"user\", \"content\": prompt}\n",
        "            ],\n",
        "            max_tokens=250,  # Increased to ensure complete explanations\n",
        "            temperature=0.2  # Lower for consistent, accurate classifications\n",
        "        )\n",
        "\n",
        "        # Extract the classification and explanation\n",
        "        response_text = response.choices[0].message.content.strip()\n",
        "\n",
        "        # Parse the response\n",
        "        classification = \"বর্ণনামূলক\"  # Default to descriptive if parsing fails\n",
        "        explanation = \"পার্সিং ত্রুটি: উত্তর থেকে শ্রেণীবদ্ধকরণ পাওয়া যায়নি।\"\n",
        "        lines = response_text.split(\"\\n\")\n",
        "        for line in lines:\n",
        "            if line.startswith(\"শ্রেণীবদ্ধকরণ:\"):\n",
        "                classification = line.replace(\"শ্রেণীবদ্ধকরণ:\", \"\").strip()\n",
        "\n",
        "\n",
        "        # Validate classification\n",
        "        if classification not in [\"ফ্যাক্টয়েড\", \"বর্ণনামূলক\"]:\n",
        "            classification = \"বর্ণনামূলক\"\n",
        "            explanation = \"ত্রুটি: অবৈধ শ্রেণীবদ্ধকরণ প্রাপ্ত। বর্ণনামূলক হিসেবে ডিফল্ট করা হয়েছে।\"\n",
        "\n",
        "        return {\"classification\": classification, \"explanation\": explanation}\n",
        "\n",
        "    except Exception as e:\n",
        "        return {\"classification\": \"বর্ণনামূলক\", \"explanation\": f\"ত্রুটি: {str(e)}\"}\n",
        "\n",
        "# Example usage\n",
        "if __name__ == \"__main__\":\n",
        "    # Sample Bangla questions\n",
        "    sample_questions = [\n",
        "        \"বাংলাদেশের সংবিধানে মৌলিক অধিকার কী কী?\",\n",
        "        \"সংবিধানের ৭ নং অনুচ্ছেদে কী বলা আছে?\",\n",
        "        \"ভোটের অধিকার সম্পর্কে সংবিধানে কী আছে?\",\n",
        "        \"সংবিধানে অধিকার কী?\",\n",
        "        \"১৫তম সংশোধনীতে ভোটের অধিকারে কী পরিবর্তন হয়েছে?\",\n",
        "        \"বাংলাদেশের সংবিধানে অধিকার কী?\",\n",
        "        \"সংবিধানে নাগরিকদের স্বাধীনতা কীভাবে সুরক্ষিত হয়?\"\n",
        "    ]\n",
        "\n",
        "    for question in sample_questions:\n",
        "        result = classify_question(question, model=\"gpt-3.5-turbo-0125\")\n",
        "        print(f\"প্রশ্ন: {question}\")\n",
        "        print(f\"শ্রেণীবদ্ধকরণ: {result['classification']}\")\n",
        "        #print(f\"ব্যাখ্যা: {result['explanation']}\\n\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vy5sE2fHNEW4",
        "outputId": "ab289075-0cff-4b45-c33c-e68478dd1e3d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "প্রশ্ন: আপীল বিভাগের কাজ কী বিস্তারিত বল\n",
            "শ্রেণীবদ্ধকরণ: বর্ণনামূলক\n"
          ]
        }
      ],
      "source": [
        "question=\"আপীল বিভাগের কাজ কী বিস্তারিত বল\"\n",
        "result = classify_question(question)\n",
        "print(f\"প্রশ্ন: {question}\")\n",
        "print(f\"শ্রেণীবদ্ধকরণ: {result['classification']}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Generation Part"
      ],
      "metadata": {
        "id": "iCjbF6lW1cGG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cKPJPcT_QVI2"
      },
      "outputs": [],
      "source": [
        "from langchain_core.runnables import RunnableParallel, RunnablePassthrough, RunnableLambda\n",
        "from langchain_core.output_parsers import StrOutputParser\n",
        "from langchain_core.runnables import RunnableLambda, RunnablePassthrough, RunnableParallel\n",
        "from langchain_core.prompts import PromptTemplate\n",
        "from langchain.memory import ChatMessageHistory\n",
        "from langchain_core.messages import HumanMessage, AIMessage\n",
        "from langchain_openai import ChatOpenAI\n",
        "from langchain_core.output_parsers import StrOutputParser\n",
        "from sentence_transformers import SentenceTransformer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yH7yplISQrRR"
      },
      "outputs": [],
      "source": [
        "# Step 1: Initialize models\n",
        "#embedding_model = SentenceTransformer('sagorsarker/bangla-bert-base')  # Better for Bengali\n",
        "import os\n",
        "os.environ[\"OPENAI_API_KEY\"] = \"\"\n",
        "llm = ChatOpenAI(\n",
        "    openai_api_key=\"\",\n",
        "    model_name=\"gpt-3.5-turbo-0125\",  # Use a model with better multilingual support\n",
        "    temperature=0\n",
        ")\n",
        "parser = StrOutputParser()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Chat History"
      ],
      "metadata": {
        "id": "8fdPLHJh1gVA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hzYfKf48QuUU"
      },
      "outputs": [],
      "source": [
        "# Step 2: Initialize Chat History\n",
        "chat_history = ChatMessageHistory()\n",
        "def format_chat_history(history, max_messages=10):\n",
        "    \"\"\"Convert chat history into a formatted string.\"\"\"\n",
        "    messages = history.messages[-max_messages:]\n",
        "    formatted = \"\"\n",
        "    for msg in messages:\n",
        "        if isinstance(msg, HumanMessage):\n",
        "            formatted += f\"User: {msg.content}\\n\"\n",
        "        elif isinstance(msg, AIMessage):\n",
        "            formatted += f\"Assistant: {msg.content}\\n\"\n",
        "    return formatted"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Format Context"
      ],
      "metadata": {
        "id": "Fnd9AtvK1tqq"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "93LmEzxdQxV4"
      },
      "outputs": [],
      "source": [
        "# Step 3: Define a function to format documents\n",
        "def format_docs(results):\n",
        "    \"\"\"Format vector store results into a string.\"\"\"\n",
        "    #print(\"Raw results structure:\", results)  # Debug full results\n",
        "    documents = results.get('documents', [[]])[0]  # Get first list of documents\n",
        "    #print(\"Extracted documents:\", documents)  # Debug extracted documents\n",
        "    if not documents:\n",
        "        print(\"Warning: No documents retrieved!\")\n",
        "        return \"\"\n",
        "    formatted = \"\\n\".join([str(doc) for doc in documents if doc])  # Ensure no empty strings\n",
        "\n",
        "    #print(\"Formatted context:\", formatted[:200], \"...\")  # Debug formatted output\n",
        "    #if not formatted.strip():\n",
        "        #print(\"Warning: Formatted context is empty after processing!\")\n",
        "    #formatted=filtered_contexts(results)\n",
        "    #print(formatted)\n",
        "    return formatted  # Limit context length"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DbiPhm_mQySk"
      },
      "outputs": [],
      "source": [
        "# Step 4: Define the vector store query function\n",
        "def query_vector_store(question):\n",
        "    embedding = model.encode([question])[question]\n",
        "    results = collection.query(query_embeddings=[embedding], n_results=3)\n",
        "    return results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XSIAgMEPQ0Y2"
      },
      "outputs": [],
      "source": [
        "# Step 5: Wrap components in LangChain Runnables\n",
        "query_chain = RunnableLambda(query_vector_store)\n",
        "context_chain = query_chain | RunnableLambda(format_docs)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prompt"
      ],
      "metadata": {
        "id": "qUh_QgMR1yN8"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J3HTDMxCQ2Ur"
      },
      "outputs": [],
      "source": [
        "# Step 6: Update the Prompt Template\n",
        "prompt = PromptTemplate(\n",
        "    template=\"\"\"\n",
        "      আপনি বাংলাদেশের সংবিধানের একটি সহায়ক সহকারী।\n",
        "      শুধুমাত্র নিচের relevant context অংশের ভিত্তিতে প্রশ্নের সঠিক এবং সংক্ষিপ্ত উত্তর দিন।\n",
        "      চ্যাট ইতিহাস:\n",
        "      {history}\n",
        "      প্রাসঙ্গিক অংশ:\n",
        "      {context}\n",
        "      প্রশ্ন:\n",
        "      {question}\n",
        "      উত্তর শুধুমাত্র প্রাসঙ্গিক অংশ থেকে নিন। Context এর  বাইরের কোনো তথ্য, অনুমান, বা সাধারণ জ্ঞান ব্যবহার করবেন না।\n",
        "      যদি উত্তর প্রাসঙ্গিক অংশে না থাকে, তবে বলুন: \"আমি জানি না\"\n",
        "      যদি উত্তর প্রাসঙ্গিক অংশে  থাকে, তবে  উত্তর দিন বাংলায়, বিস্তারিত  এবং সঠিক ।\n",
        "    \"\"\",\n",
        "    input_variables=['history', 'context', 'question']\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uzD6o6uJQ5bF"
      },
      "outputs": [],
      "source": [
        "# Step 7: Update the parallel chain to include history\n",
        "def get_history(_):\n",
        "    return format_chat_history(chat_history)\n",
        "\n",
        "parallel_chain = RunnableParallel({\n",
        "    'history': RunnableLambda(get_history),\n",
        "    'context': context_chain,\n",
        "    'question': RunnablePassthrough()\n",
        "})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1baKcMl8Q8al"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Step 8: Define the main chain with debugging\n",
        "def debug_invoke(input):\n",
        "    #print(\"Prompt input:\", input)\n",
        "    return prompt.invoke(input)\n",
        "\n",
        "main_chain = parallel_chain | debug_invoke | llm | parser"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ask A Question"
      ],
      "metadata": {
        "id": "_AsQnn_G11Jr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 9: Function to invoke the chain and update history\n",
        "def ask_question(question):\n",
        "    try:\n",
        "        chat_history.add_message(HumanMessage(content=question))\n",
        "        result = main_chain.invoke(question)\n",
        "        #print(\"Raw LLM output:\", result)\n",
        "        chat_history.add_message(AIMessage(content=result))\n",
        "        return result\n",
        "    except Exception as e:\n",
        "        print(f\"Error during generation: {e}\")\n",
        "        return None"
      ],
      "metadata": {
        "id": "hvzBTfvCg5tx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "einrrGKiUP0W"
      },
      "outputs": [],
      "source": [
        "def final_ans(query):\n",
        "\n",
        "  result = classify_question(query)\n",
        "  #print(f\"শ্রেণীবদ্ধকরণ: {result['classification']}\")\n",
        "\n",
        "  if result['classification'] == \"বর্ণনামূলক\":\n",
        "      rewritten = rewrite_query(query)\n",
        "      #print(f\"মূল প্রশ্ন: {query}\")\n",
        "      #p#rint(f\"পুনর্লিখিত প্রশ্ন: {rewritten}\\n\")\n",
        "\n",
        "      #rewritten_queries = generate_multi_queries(rewritten)\n",
        "      #print(f\"মূল প্রশ্ন: {query}\")\n",
        "      #for i, rewritten in enumerate(rewritten_queries, 1):\n",
        "          #print(f\"পুনর্লিখিত প্রশ্ন {i}: {rewritten}\")\n",
        "      ans=ask_question(rewritten)\n",
        "      return ans\n",
        "  else:\n",
        "    ans=ask_question(query)\n",
        "    return ans\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"আপীল  বিভাগের কাজ  কী  বিস্তারিত বল ?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GakTl0TDegA2",
        "outputId": "1cb00faf-d22f-409b-a924-d38c9cb866b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "আপীল বিভাগের কাজ হলো হাইকোর্ট বিভাগের রায়, ডিক্রী, আদেশ বা দণ্ডাদেশের বিরুদ্ধে আপীল শুনানী এবং তা নিষ্পত্তির এখতিয়ার আপীল বিভাগের থাকবে। সংবিধানে আপীল বিভাগের কাজ সম্পর্কে বিস্তারিত তথ্য দেওয়া হয়েছে।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"আইন কীভাবে প্রণয়ন করা হয়?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v571LT6Seyyj",
        "outputId": "a8847bd8-121f-4403-b583-64b456b1631d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "আইন প্রণয়ন করা হয় সংসদে যে কোনো প্রস্তাব বিল আকারে উত্থাপিত করে। সংসদ যখন কোনো বিল গৃহীত করবে, তা রাষ্ট্রপতির কাছে সম্মতির জন্য পাঠাতে হবে। এটি সংবিধানে উল্লেখিত আইন প্রণয়নের পদ্ধতি।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"কখন স্বাধীনতার ঘোষণা দেওয়া হয়?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "phtTM9L-fBhU",
        "outputId": "ccac8c21-7b5e-4271-ca7c-c5186a6403ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "স্বাধীনতার ঘোষণা ১৯৭১ সালের ২৬শে মার্চে দেওয়া হয়।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"সংবিধানে মানবাধিকার নিয়ে কী বলা আছে?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jSsqYrwtfKK0",
        "outputId": "995926e0-a78f-4e05-f074-07b7cb0e6141"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "সংবিধানে মানবাধিকার নিয়ে বলা হয়েছে যে, কোনো ব্যক্তিকে আইন অনুযায়ী ছাড়া তার জীবন বা ব্যক্তিস্বাধীনতা থেকে বঞ্চিত করা যাবে না। এটি সংবিধানের মানবাধিকার সংরক্ষণ সম্পর্কে উল্লেখিত একটি গুরুত্বপূর্ণ বিধান।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"কখন রাষ্ট্রদ্রোহিতা হবে?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VpPgu5qlfOW-",
        "outputId": "9a7f1804-b637-47dd-c6c9-575fd0223667"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "রাষ্ট্রদ্রোহিতা হবে যখন কেউ শক্তি ব্যবহার করে, বা অন্য কোনো বেআইনি উপায়ে সংবিধান বা এর কোনো অংশ বাতিল বা স্থগিত করে, বা সেটা করার চেষ্টা করে বা ষড়যন্ত্র করে, বা জনগণের মধ্যে সংবিধানের প্রতি বিশ্বাস কমানোর চেষ্টা করে। এই অপরাধে অপরাধী হিসেবে গণ্য হবে এবং রাষ্ট্রদ্রোহিতা হিসেবে ধারণা করা হবে।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \" জাতীয় প্রতীক কেমন ?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mli0tHf8fW3F",
        "outputId": "6f88fa68-136c-4437-807c-b7bf7388f18e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "জাতীয় প্রতীক হলো পানির উপর ভাসছে জাতীয় ফুল শাপলা। চারপাশে ঘিরে আছে ধানের শীষ। উপরে আছে তিনটি পাটপাতা এবং দুই পাশে দুটি তারা (তারকা)। এটি জাতীয় প্রতীকের বর্ণনা সংবিধানে দেওয়া আছে।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"এটির  চারপাশে কী রয়েছে?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9oTIRQOFfbhw",
        "outputId": "c1a35641-0a67-4f6e-fdcd-51894767e88d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "জাতীয় প্রতীকের চারপাশে ধানের শীষ ঘিরে আছে, উপরে তিনটি পাটপাতা এবং দুই পাশে দুটি তারা (তারকা) রয়েছে।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "query = \"বাংলাদেশের প্রধানমন্ত্রী কে?\"\n",
        "final_ans(query)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "Z3tcxsLsgU8L",
        "outputId": "c48486b1-4d7c-47bd-c25f-9928b83fd18b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'আমি জানি না।'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "query = \"কোন ব্যাক্তি গ্রেফতার হলে তার অধিকারসমূহ কী কী বিস্তারিত বল?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C3p7Lfrz796r",
        "outputId": "7f11b2be-afac-4b2e-bd8c-43914fe80468"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "গ্রেপ্তার হওয়া ব্যক্তিকে যত দ্রুত সম্ভব গ্রেপ্তার হওয়ার কারণ জানানো হবে এবং তাকে নির্দিষ্ট করা সময়ের বেশি প্রহরে আটক রাখা যাবে না। গ্রেপ্তার ব্যক্তির আইনজীবীর সঙ্গে পরামর্শ করার এবং আত্মপক্ষ সমর্থনের অধিকার থেকে বঞ্চিত করা যাবে না। এছাড়াও, গ্রেপ্তারকৃত বা প্রহরায় আটক ব্যক্তিকে গ্রেপ্তারের ২৪ ঘণ্টার মধ্যে নিকটতম ম্যাজিস্ট্রেটের সামনে হাজির করতে হবে। ম্যাজিস্ট্রেটের অনুমতি ছাড়া তাকে অতিরিক্ত সময় আটক রাখা যাবে না। (সংবিধান, ধারা ৩৩)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "query = \"কোন ব্যাক্তি গ্রেফতার হলে তার সাথে করণীয় কী কী ?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9SCjb_p08gwS",
        "outputId": "33709e6d-dc97-4193-cb1e-e34f073a035e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "গ্রেপ্তার হওয়া ব্যক্তিকে যত দ্রুত সম্ভব গ্রেপ্তার হওয়ার কারণ জানানো হবে এবং তাকে নির্দিষ্ট করা সময়ের বেশি প্রহরে আটক রাখা যাবে না। গ্রেপ্তার ব্যক্তির আইনজীবীর সঙ্গে পরামর্শ করার এবং আত্মপক্ষ সমর্থনের অধিকার থেকে বঞ্চিত করা যাবে না। এছাড়াও, গ্রেপ্তারকৃত বা প্রহরায় আটক ব্যক্তিকে গ্রেপ্তারের ২৪ ঘণ্টার মধ্যে নিকটতম ম্যাজিস্ট্রেটের সামনে হাজির করতে হবে। ম্যাজিস্ট্রেটের অনুমতি ছাড়া তাকে অতিরিক্ত সময় আটক রাখা যাবে না। (সংবিধান, ধারা ৩৩)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"তাকে কার সামনে হাজির করতে হবে ?\"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H0n-h6QN811k",
        "outputId": "0f444b1f-05cc-4e43-8b94-3f5c653637e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "গ্রেপ্তার হওয়া ব্যক্তিকে গ্রেপ্তারের ২৪ ঘণ্টার মধ্যে নিকটম ম্যাজিস্ট্রেটের সামনে হাজির করতে হবে। (সংবিধান, ধারা ৩৩)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"তাকে কত সময়য়ের মধ্যে ম্যাজিস্ট্রেটের সামনে হাজির করতে হবে? \"\n",
        "final_ans(query)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "blJcgTSb9Jd0",
        "outputId": "9ea36c9e-e5f2-4bb1-cd62-5d4cc1aa9bc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'গ্রেপ্তার হওয়া ব্যক্তিকে গ্রেপ্তারের ২৪ ঘণ্টার মধ্যে নিকটম ম্যাজিস্ট্রেটের সামনে হাজির করতে হবে। (সংবিধান, ধারা ৩৩)'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage\n",
        "query = \"নির্বাচন কমিশনের দায়িত্বসমূহ কী কী ?  \"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xANXLAJm9ekB",
        "outputId": "3ce10ae9-7bea-487a-c03c-5257b5fa9adb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "প্রশ্নটির উত্তর: \n",
            "নির্বাচন কমিশনের দায়িত্বসমূহ হলো রাষ্ট্রপতি ও সংসদের নির্বাচনের জন্য ভোটার-তালিকা প্রস্তুতকরণের তত্ত্বাবধান, নির্দেশনা ও নিয়ন্ত্রণ এবং সংশ্লিষ্ট নির্বাচন পরিচালনার দায়িত্ব নির্বাচন কমিশনের উপর থাকবে। নির্বাচন কমিশন এই সংবিধান ও আইনানুযায়ী— (সংবিধান, ধারা ১১৯)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage\n",
        "query = \"কখন জরুরী অবস্থা জারি করা হয় ? \"\n",
        "final_ans(query)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "id": "Hje11_um9su5",
        "outputId": "f052612d-6855-4a66-a74c-baee9bd162a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'জরুরী অবস্থা জারি করা হয় যখন রাষ্ট্রপতি সন্তোষজনকভাবে প্রমাণিত করেন যে কোনো যুদ্ধ, বহিরাগত আক্রমণ বা অভ্যন্তরীণ বিশৃঙ্খলার কারণে বাংলাদেশ বা এর কোনো অংশের নিরাপত্তা বা অর্থনৈতিক জীবন বিপন্ন হয়ে পড়েছে। তারপরে তিনি সর্বোচ্চ ১২০ দিনের জন্য জরুরী অবস্থা ঘোষণা করতে পারবেন। (নবম-ক ভাগ, জরুরী বিধানাবলী, জরুরী-অবস্থা ঘোষণা, ১৪১ক)'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage\n",
        "query = \"বাংলাদেশের জাতীয় সঙ্গীত কোনটি ? \"\n",
        "print(final_ans(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bOFWrkHVAiEv",
        "outputId": "df3b6005-c7bb-47cb-941f-e5d305ad932b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "আমার সোনার বাংলা গানটি বাংলাদেশের জাতীয় সঙ্গীত।\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Data\n",
        "data = {\n",
        "    \"Question\": [\n",
        "\n",
        "        \"দেশের সর্বোচ্চ আইন কী?\",\n",
        "        \"বাংলাদেশের জাতীয় সঙ্গীত কী?\",\n",
        "        \"রাষ্ট্রের মূলনীতিসমূহ কী কী?\",\n",
        "        \"সংবিধানের সংশোধন কিভাবে হয়?\"\n",
        "    ],\n",
        "    \"Context\": [\n",
        "\n",
        "        \"বাংলাদেশের সংবিধান দেশের সর্বোচ্চ আইন।\",\n",
        "        \"বাংলাদেশের জাতীয় সঙ্গীত 'আমার সোনার বাংলা'।\",\n",
        "        \"রাষ্ট্রের মূলনীতি হিসেবে গণতন্ত্র, সমাজবাদী রাষ্ট্রব্যবস্থা, এবং ধর্মনিরপেক্ষতা বলা হয়েছে।\",\n",
        "        \"সংবিধানের সংশোধন করতে সংসদে বিশেষ প্রস্তাব পাস করতে হয়।\"\n",
        "    ],\n",
        "    \"Answer\": [\n",
        "\n",
        "        \"বাংলাদেশের সংবিধান দেশের সর্বোচ্চ আইন।\",\n",
        "        \"'আমার সোনার বাংলা' জাতীয় সঙ্গীত।\",\n",
        "        \"গণতন্ত্র, সমাজবাদী রাষ্ট্রব্যবস্থা, ধর্মনিরপেক্ষতা।\",\n",
        "        \"সংসদে বিশেষ প্রস্তাব পাসের মাধ্যমে সংশোধন হয়।\"\n",
        "    ]\n",
        "}\n",
        "\n",
        "# Create a DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Save to CSV file\n",
        "df.to_csv('bangla_constitution_part1_question_ans.csv', index=False)\n",
        "\n",
        "print(\"CSV file with questions, context, and answers has been created successfully.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1YrU_NmA-K0p",
        "outputId": "0da36e2a-fa15-4e27-f5c4-75efb947c0d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CSV file with questions, context, and answers has been created successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: load the csv file\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Assuming the CSV file 'bangla_constitution_qa.csv' is in the current directory\n",
        "try:\n",
        "    df = pd.read_csv('/content/bangla_constitution_part1_question_ans.csv')\n",
        "    print(\"CSV file loaded successfully.\")\n",
        "    # Now you can work with the DataFrame 'df'\n",
        "    #print(df.head())  # Print the first few rows to verify\n",
        "\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'bangla_constitution_part1_question_ans.csv.csv' not found in the current directory.\")\n",
        "except pd.errors.EmptyDataError:\n",
        "    print(\"Error: 'bangla_constitution_part1_question_ans.csv' is empty.\")\n",
        "except pd.errors.ParserError:\n",
        "    print(\"Error: Unable to parse the CSV file. Check its format.\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X8whDL2f-SH4",
        "outputId": "5d05262a-cf22-4678-f18d-3d763888f7f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CSV file loaded successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "#modell = SentenceTransformer('shihab17/bangla-sentence-transformer')\n",
        "def evaluate_retrieval_accuracy(dataset, model, k=5, similarity_threshold=0.7):\n",
        "    retrieval_hits = 0\n",
        "    total_questions = len(dataset)\n",
        "\n",
        "    for _, example in dataset.iterrows():  # Iterate over rows of the DataFrame\n",
        "        question = example['Question']\n",
        "        context = example['Context']\n",
        "        true_answer = example['Answer']\n",
        "\n",
        "        generated_ans=final_ans(question);\n",
        "\n",
        "        print(question)\n",
        "        print('question: ', question)\n",
        "        print(\"answer \",true_answer)\n",
        "        print(\"gen_ans \",generated_ans)\n",
        "\n",
        "\n",
        "        print(\"--------------------------------------------------------------------------------------\\n\\n\")\n",
        "\n",
        "\n",
        "# Example usage with your DataFrame (df):\n",
        "retrieval_accuracy = evaluate_retrieval_accuracy(df, model)\n",
        "#print(f\"Retrieval Accuracy: {retrieval_accuracy:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VO14INOo-WIQ",
        "outputId": "454d48dc-0400-4ed9-d410-11597cd36565"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "দেশের সর্বোচ্চ আইন কী?\n",
            "question:  দেশের সর্বোচ্চ আইন কী?\n",
            "answer  বাংলাদেশের সংবিধান দেশের সর্বোচ্চ আইন।\n",
            "gen_ans  দেশের সর্বোচ্চ আইন হলো সংবিধান। সংবিধান হলো দেশের সর্বোচ্চ আইন এবং সংবিধানের মাধ্যমেই সব ক্ষমতার মালিক জনগণ। যদি কোনো আইন সংবিধানের বিরোধিতা করে, তাহলে সেই আইনের অসংগত অংশ বাতিল হবে।\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "\n",
            "বাংলাদেশের জাতীয় সঙ্গীত কী?\n",
            "question:  বাংলাদেশের জাতীয় সঙ্গীত কী?\n",
            "answer  'আমার সোনার বাংলা' জাতীয় সঙ্গীত।\n",
            "gen_ans  আমার সোনার বাংলা গানটি বাংলাদেশের জাতীয় সঙ্গীত।\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "\n",
            "রাষ্ট্রের মূলনীতিসমূহ কী কী?\n",
            "question:  রাষ্ট্রের মূলনীতিসমূহ কী কী?\n",
            "answer  গণতন্ত্র, সমাজবাদী রাষ্ট্রব্যবস্থা, ধর্মনিরপেক্ষতা।\n",
            "gen_ans  আমরা অঙ্গীকার করছি, সেই সব মহান আদর্শ—যেগুলো আমাদের সাহসী জনগণকে জাতীয় মুক্তি সংগ্রামে আত্মনিয়োগ করতে এবং অনেক বীর শহীদকে জীবন উৎসর্গ করতে অনুপ্রাণিত করেছিল—যেমন: জাতীয়তাবাদ, সমাজতন্ত্র, গণতন্ত্র ও ধর্মনিরপেক্ষতা—এই আদর্শগুলোই হবে এই সংবিধানের মূলনীতি। আন্তর্জাতিক শান্তি, নিরাপত্তা ও সংহতির উন্নয়ন এবং আন্তর্জাতিক সম্পর্কের ভিত্তি হবে দেশের আন্তর্জাতিক সম্পর্কের ভিত্তি। এই নীতির ওপর ভিত্তি করে রাষ্ট্র আন্তর্জাতিক সম্পর্কের ক্ষেত্রে জোর প্রয়োগ এড়িয়ে চলবে এবং সম্পূর্ণ নিরস্ত্রীকরণের চেষ্টা করবে।\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "\n",
            "সংবিধানের সংশোধন কিভাবে হয়?\n",
            "question:  সংবিধানের সংশোধন কিভাবে হয়?\n",
            "answer  সংসদে বিশেষ প্রস্তাব পাসের মাধ্যমে সংশোধন হয়।\n",
            "gen_ans  সংবিধানের সংশোধন হয় সংসদের আইন-দ্বারা সংবিধানের কোনো বিধান সংযোজন, পরিবর্তন, প্রতিস্থাপন বা রহিতকরণের মাধ্যমে। সংশোধনী বিলের সম্পূর্ণ শিরোনামে স্পষ্টভাবে উল্লেখ থাকতে হবে যে সংবিধানের কোন বিধান সংশোধন করা হচ্ছে। সংবিধানের প্রস্তাবনা, প্রথম, দ্বিতীয়, তৃতীয় এবং একাদশ ভাগ, নবম-ক ভাগের নির্দিষ্ট অনুচ্ছেদ এবং সংবিধানের মৌলিক কাঠামোর সঙ্গে সম্পর্কিত অনুচ্ছেদগুলোতে কোনো পরিবর্তন, সংশোধন, বাদ দেওয়া বা প্রতিস্থাপন করা যাবেনা।\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sentence_transformers import SentenceTransformer, util\n",
        "from langchain_openai import ChatOpenAI\n",
        "from langchain_core.messages import HumanMessage, SystemMessage\n",
        "import os\n",
        "\n",
        "class BanglaSentenceTransformerSmall:\n",
        "    def __init__(self, model_name='intfloat/multilingual-e5-large'):\n",
        "        self.model = SentenceTransformer(model_name)\n",
        "\n",
        "    def encode(self, sentences):\n",
        "        sentence_embeddings = self.model.encode(sentences)\n",
        "        return dict(zip(sentences, sentence_embeddings))\n",
        "\n",
        "    def similarity(self, embedding1, embedding2):\n",
        "        return util.pytorch_cos_sim(embedding1, embedding2)\n",
        "\n",
        "def get_gpt_similarity(question, true_answer, generated_answer, llm):\n",
        "    # Prompt for GPT to score semantic similarity\n",
        "    prompt = f\"\"\"\n",
        "    Given the question, true answer, and generated answer, score how semantically similar the generated answer is to the true answer on a scale of 0 to 1, where 1 is identical in meaning and 0 is completely different.\n",
        "\n",
        "    Question: {question}\n",
        "    True Answer: {true_answer}\n",
        "    Generated Answer: {generated_answer}\n",
        "\n",
        "    Provide a score (0–1)  in the format:\n",
        "    Score: <score>\n",
        "    \"\"\"\n",
        "\n",
        "    # Use ChatOpenAI's invoke method\n",
        "    messages = [\n",
        "        SystemMessage(content=\"You are an evaluator of semantic similarity.\"),\n",
        "        HumanMessage(content=prompt)\n",
        "    ]\n",
        "    try:\n",
        "        response = llm.invoke(messages)\n",
        "        response_text = response.content\n",
        "\n",
        "        # Parse score from response\n",
        "        score_line = [line for line in response_text.split('\\n') if line.startswith(\"Score: \")]\n",
        "        if score_line:\n",
        "            score = float(score_line[0].replace(\"Score: \", \"\"))\n",
        "            return score\n",
        "        else:\n",
        "            print(\"Warning: Could not parse GPT score. Returning 0.\")\n",
        "            return 0.0\n",
        "    except Exception as e:\n",
        "        print(f\"Error calling GPT: {e}\")\n",
        "        return 0.0\n",
        "\n",
        "def evaluate_retrieval_accuracy(dataset, model, llm, k=1, similarity_threshold=0.7):\n",
        "    y_true = []\n",
        "    y_pred = []\n",
        "    recall_scores, precision_scores, f1_scores, llm_reteval_cos_scores, llm_reteval_gpt_scores = [], [], [], [], []\n",
        "    total_questions = len(dataset)\n",
        "\n",
        "    for _, example in dataset.iterrows():\n",
        "        question = example['Question']\n",
        "        true_answer = example['Answer']\n",
        "\n",
        "        # Placeholder for main_chain (replace with main_chain.invoke(question))\n",
        "        generated_ans = f\"Generated answer for: {main_chain.invoke(question)}\"\n",
        "\n",
        "        y_true.append(true_answer)\n",
        "        y_pred.append(generated_ans)\n",
        "\n",
        "        # Compute cosine similarity\n",
        "        true_answer_embedding = model.encode([true_answer])[true_answer]\n",
        "        generated_answer_embedding = model.encode([generated_ans])[generated_ans]\n",
        "        answer_similarity = cosine_similarity([true_answer_embedding], [generated_answer_embedding])[0][0]\n",
        "\n",
        "        # Determine relevance (cosine similarity >= threshold)\n",
        "        is_relevant = 1 if answer_similarity >= similarity_threshold else 0\n",
        "        total_relevant = 1  # One true answer per question\n",
        "\n",
        "        # Recall@1\n",
        "        recall = is_relevant / total_relevant\n",
        "        recall_scores.append(recall)\n",
        "\n",
        "        # Precision@1\n",
        "        precision = is_relevant / k\n",
        "        precision_scores.append(precision)\n",
        "\n",
        "        # F1@1\n",
        "        f1 = (2 * precision * recall) / (precision + recall) if (precision + recall) > 0 else 0\n",
        "        f1_scores.append(f1)\n",
        "\n",
        "        # LLM-retEval (Cosine)\n",
        "        llm_reteval_cos_scores.append(answer_similarity)\n",
        "\n",
        "        # LLM-retEval (GPT)\n",
        "        llm_reteval_gpt = get_gpt_similarity(question, true_answer, generated_ans, llm)\n",
        "        llm_reteval_gpt_scores.append(llm_reteval_gpt)\n",
        "\n",
        "        # Print results\n",
        "        print(f\"question: {question}\")\n",
        "        print(f\"answer: {true_answer}\")\n",
        "        print(f\"gen_ans: {generated_ans}\")\n",
        "        print(f\"Answer Cosine Similarity: {answer_similarity:.3f}\")\n",
        "        print(f\"Relevant (Cosine >= {similarity_threshold}): {is_relevant}\")\n",
        "        print(f\"Recall@{k}: {recall:.3f}\")\n",
        "        print(f\"Precision@{k}: {precision:.3f}\")\n",
        "        print(f\"F1@{k}: {f1:.3f}\")\n",
        "        print(f\"LLM-retEval (Cosine): {answer_similarity:.3f}\")\n",
        "        print(f\"LLM-retEval (GPT): {llm_reteval_gpt:.3f}\")\n",
        "        print(\"--------------------------------------------------------------------------------------\\n\")\n",
        "\n",
        "    # Aggregate results\n",
        "    avg_recall = np.mean(recall_scores)\n",
        "    avg_precision = np.mean(precision_scores)\n",
        "    avg_f1 = np.mean(f1_scores)\n",
        "    avg_llm_reteval_cos = np.mean(llm_reteval_cos_scores)\n",
        "    avg_llm_reteval_gpt = np.mean(llm_reteval_gpt_scores)\n",
        "\n",
        "    return {\n",
        "        f\"Recall@{k}\": avg_recall,\n",
        "        f\"Precision@{k}\": avg_precision,\n",
        "        f\"F1@{k}\": avg_f1,\n",
        "        \"LLM-retEval (Cosine)\": avg_llm_reteval_cos,\n",
        "        \"LLM-retEval (GPT)\": avg_llm_reteval_gpt,\n",
        "        \"y_true\": y_true,\n",
        "        \"y_pred\": y_pred\n",
        "    }\n",
        "\n",
        "\n",
        "# Initialize models\n",
        "model = BanglaSentenceTransformerSmall()\n",
        "llm = ChatOpenAI(model_name=\"gpt-3.5-turbo-0125\", api_key=os.getenv(\"OPENAI_API_KEY\"))\n",
        "\n",
        "# Calculate metrics\n",
        "k = 1\n",
        "results = evaluate_retrieval_accuracy(df, model, llm, k=k, similarity_threshold=0.7)\n",
        "\n",
        "# Print aggregated results\n",
        "print(\"\\nAggregated Results:\")\n",
        "for metric, value in results.items():\n",
        "    if metric not in [\"y_true\", \"y_pred\"]:\n",
        "        print(f\"{metric}: {value:.3f}\")\n",
        "    else:\n",
        "        print(f\"{metric}: {value}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "twQA62eeAAiE",
        "outputId": "4b574d5e-8e06-4e23-a599-2f01ef5244b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "question: দেশের সর্বোচ্চ আইন কী?\n",
            "answer: বাংলাদেশের সংবিধান দেশের সর্বোচ্চ আইন।\n",
            "gen_ans: Generated answer for: সংবিধান। সংবিধান হলো দেশের সর্বোচ্চ আইন। যদি কোনো আইন সংবিধানের বিরোধিতা করে, তাহলে সেই আইনের অসংগত অংশ বাতিল হবে।\n",
            "Answer Cosine Similarity: 0.893\n",
            "Relevant (Cosine >= 0.7): 1\n",
            "Recall@1: 1.000\n",
            "Precision@1: 1.000\n",
            "F1@1: 1.000\n",
            "LLM-retEval (Cosine): 0.893\n",
            "LLM-retEval (GPT): 0.900\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "question: বাংলাদেশের জাতীয় সঙ্গীত কী?\n",
            "answer: 'আমার সোনার বাংলা' জাতীয় সঙ্গীত।\n",
            "gen_ans: Generated answer for: আমার সোনার বাংলা গানটি বাংলাদেশের জাতীয় সঙ্গীত।\n",
            "Answer Cosine Similarity: 0.910\n",
            "Relevant (Cosine >= 0.7): 1\n",
            "Recall@1: 1.000\n",
            "Precision@1: 1.000\n",
            "F1@1: 1.000\n",
            "LLM-retEval (Cosine): 0.910\n",
            "LLM-retEval (GPT): 0.950\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "question: রাষ্ট্রের মূলনীতিসমূহ কী কী?\n",
            "answer: গণতন্ত্র, সমাজবাদী রাষ্ট্রব্যবস্থা, ধর্মনিরপেক্ষতা।\n",
            "gen_ans: Generated answer for: জাতীয়তাবাদ, সমাজতন্ত্র, গণতন্ত্র ও ধর্মনিরপেক্ষতা - এই নীতিসমূহ এবং এদের থেকে উদ্ভূত অন্যান্য নীতিসমূহ রাষ্ট্র পরিচালনার মূলনীতি হিসেবে গণ্য হবে।\n",
            "(৮ )(২) এই নীতিসমূহ বাংলাদেশের পরিচালনার মূল সূত্র হবে। আইন তৈরির সময় রাষ্ট্র এগুলো মানবে, আইন ও সংবিধান ব্যাখ্যা করার সময় এগুলো নির্দেশক হবে, আর রাষ্ট্র ও নাগরিকদের কাজের ভিত্তি হবে। তবে এই নীতিসমূহ আদালতের মাধ্যমে জোর করানো যাবে না।\n",
            "Answer Cosine Similarity: 0.871\n",
            "Relevant (Cosine >= 0.7): 1\n",
            "Recall@1: 1.000\n",
            "Precision@1: 1.000\n",
            "F1@1: 1.000\n",
            "LLM-retEval (Cosine): 0.871\n",
            "LLM-retEval (GPT): 0.750\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "question: সংবিধানের সংশোধন কিভাবে হয়?\n",
            "answer: সংসদে বিশেষ প্রস্তাব পাসের মাধ্যমে সংশোধন হয়।\n",
            "gen_ans: Generated answer for: সংবিধানের সংশোধন হয় সংসদের আইন-দ্বারা সংবিধানের কোনো বিধান সংযোজন, পরিবর্তন, প্রতিস্থাপন বা রহিতকরণের মাধ্যমে। সংশোধনী বিলের সম্পূর্ণ শিরোনামে স্পষ্টভাবে উল্লেখ থাকতে হবে যে সংবিধানের কোন বিধান সংশোধন করা হচ্ছে। সংবিধানের প্রস্তাবনা, প্রথম, দ্বিতীয়, তৃতীয় এবং একাদশ ভাগ, নবম-ক ভাগের নির্দিষ্ট অনুচ্ছেদ এবং সংবিধানের মৌলিক কাঠামোর সঙ্গে সম্পর্কিত অনুচ্ছেদগুলোতে কোনো পরিবর্তন, সংশোধন, বাদ দেওয়া বা প্রতিস্থাপন করা যাবেনা।\n",
            "Answer Cosine Similarity: 0.835\n",
            "Relevant (Cosine >= 0.7): 1\n",
            "Recall@1: 1.000\n",
            "Precision@1: 1.000\n",
            "F1@1: 1.000\n",
            "LLM-retEval (Cosine): 0.835\n",
            "LLM-retEval (GPT): 0.600\n",
            "--------------------------------------------------------------------------------------\n",
            "\n",
            "\n",
            "Aggregated Results:\n",
            "Recall@1: 1.000\n",
            "Precision@1: 1.000\n",
            "F1@1: 1.000\n",
            "LLM-retEval (Cosine): 0.877\n",
            "LLM-retEval (GPT): 0.800\n",
            "y_true: ['বাংলাদেশের সংবিধান দেশের সর্বোচ্চ আইন।', \"'আমার সোনার বাংলা' জাতীয় সঙ্গীত।\", 'গণতন্ত্র, সমাজবাদী রাষ্ট্রব্যবস্থা, ধর্মনিরপেক্ষতা।', 'সংসদে বিশেষ প্রস্তাব পাসের মাধ্যমে সংশোধন হয়।']\n",
            "y_pred: ['Generated answer for: সংবিধান। সংবিধান হলো দেশের সর্বোচ্চ আইন। যদি কোনো আইন সংবিধানের বিরোধিতা করে, তাহলে সেই আইনের অসংগত অংশ বাতিল হবে।', 'Generated answer for: আমার সোনার বাংলা গানটি বাংলাদেশের জাতীয় সঙ্গীত।', 'Generated answer for: জাতীয়তাবাদ, সমাজতন্ত্র, গণতন্ত্র ও ধর্মনিরপেক্ষতা - এই নীতিসমূহ এবং এদের থেকে উদ্ভূত অন্যান্য নীতিসমূহ রাষ্ট্র পরিচালনার মূলনীতি হিসেবে গণ্য হবে।\\n(৮ )(২) এই নীতিসমূহ বাংলাদেশের পরিচালনার মূল সূত্র হবে। আইন তৈরির সময় রাষ্ট্র এগুলো মানবে, আইন ও সংবিধান ব্যাখ্যা করার সময় এগুলো নির্দেশক হবে, আর রাষ্ট্র ও নাগরিকদের কাজের ভিত্তি হবে। তবে এই নীতিসমূহ আদালতের মাধ্যমে জোর করানো যাবে না।', 'Generated answer for: সংবিধানের সংশোধন হয় সংসদের আইন-দ্বারা সংবিধানের কোনো বিধান সংযোজন, পরিবর্তন, প্রতিস্থাপন বা রহিতকরণের মাধ্যমে। সংশোধনী বিলের সম্পূর্ণ শিরোনামে স্পষ্টভাবে উল্লেখ থাকতে হবে যে সংবিধানের কোন বিধান সংশোধন করা হচ্ছে। সংবিধানের প্রস্তাবনা, প্রথম, দ্বিতীয়, তৃতীয় এবং একাদশ ভাগ, নবম-ক ভাগের নির্দিষ্ট অনুচ্ছেদ এবং সংবিধানের মৌলিক কাঠামোর সঙ্গে সম্পর্কিত অনুচ্ছেদগুলোতে কোনো পরিবর্তন, সংশোধন, বাদ দেওয়া বা প্রতিস্থাপন করা যাবেনা।']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ragas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rARgkA77B808",
        "outputId": "af78b127-6e19-488b-9167-1c2c0e7756f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ragas\n",
            "  Downloading ragas-0.2.15-py3-none-any.whl.metadata (9.0 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from ragas) (2.0.2)\n",
            "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (from ragas) (2.14.4)\n",
            "Requirement already satisfied: tiktoken in /usr/local/lib/python3.11/dist-packages (from ragas) (0.9.0)\n",
            "Requirement already satisfied: langchain in /usr/local/lib/python3.11/dist-packages (from ragas) (0.3.25)\n",
            "Requirement already satisfied: langchain-core in /usr/local/lib/python3.11/dist-packages (from ragas) (0.3.64)\n",
            "Requirement already satisfied: langchain-community in /usr/local/lib/python3.11/dist-packages (from ragas) (0.3.24)\n",
            "Requirement already satisfied: langchain_openai in /usr/local/lib/python3.11/dist-packages (from ragas) (0.3.21)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from ragas) (1.6.0)\n",
            "Collecting appdirs (from ragas)\n",
            "  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n",
            "Requirement already satisfied: pydantic>=2 in /usr/local/lib/python3.11/dist-packages (from ragas) (2.11.5)\n",
            "Requirement already satisfied: openai>1 in /usr/local/lib/python3.11/dist-packages (from ragas) (1.84.0)\n",
            "Collecting diskcache>=5.6.3 (from ragas)\n",
            "  Downloading diskcache-5.6.3-py3-none-any.whl.metadata (20 kB)\n",
            "Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (4.9.0)\n",
            "Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (1.9.0)\n",
            "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (0.28.1)\n",
            "Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (0.10.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (1.3.1)\n",
            "Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (4.67.1)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.11 in /usr/local/lib/python3.11/dist-packages (from openai>1->ragas) (4.14.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2->ragas) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2->ragas) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2->ragas) (0.4.1)\n",
            "Requirement already satisfied: pyarrow>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (18.1.0)\n",
            "Requirement already satisfied: dill<0.3.8,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (0.3.7)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (2.2.2)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (2.32.3)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (3.5.0)\n",
            "Requirement already satisfied: multiprocess in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (0.70.15)\n",
            "Requirement already satisfied: fsspec>=2021.11.1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]>=2021.11.1->datasets->ragas) (2025.3.2)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (3.11.15)\n",
            "Requirement already satisfied: huggingface-hub<1.0.0,>=0.14.0 in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (0.32.4)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets->ragas) (6.0.2)\n",
            "Requirement already satisfied: langchain-text-splitters<1.0.0,>=0.3.8 in /usr/local/lib/python3.11/dist-packages (from langchain->ragas) (0.3.8)\n",
            "Requirement already satisfied: langsmith<0.4,>=0.1.17 in /usr/local/lib/python3.11/dist-packages (from langchain->ragas) (0.3.45)\n",
            "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain->ragas) (2.0.41)\n",
            "Requirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-core->ragas) (9.1.2)\n",
            "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core->ragas) (1.33)\n",
            "Requirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /usr/local/lib/python3.11/dist-packages (from langchain-community->ragas) (0.6.7)\n",
            "Requirement already satisfied: pydantic-settings<3.0.0,>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community->ragas) (2.9.1)\n",
            "Requirement already satisfied: httpx-sse<1.0.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community->ragas) (0.4.0)\n",
            "Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken->ragas) (2024.11.6)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (1.6.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (6.4.4)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets->ragas) (1.20.0)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai>1->ragas) (3.10)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community->ragas) (3.26.1)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community->ragas) (0.9.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai>1->ragas) (2025.4.26)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai>1->ragas) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai>1->ragas) (0.16.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0.0,>=0.14.0->datasets->ragas) (3.18.0)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0.0,>=0.14.0->datasets->ragas) (1.1.2)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core->ragas) (3.0.0)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain->ragas) (3.10.18)\n",
            "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain->ragas) (1.0.0)\n",
            "Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain->ragas) (0.23.0)\n",
            "Requirement already satisfied: python-dotenv>=0.21.0 in /usr/local/lib/python3.11/dist-packages (from pydantic-settings<3.0.0,>=2.4.0->langchain-community->ragas) (1.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->datasets->ragas) (3.4.2)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->datasets->ragas) (2.4.0)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain->ragas) (3.2.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets->ragas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets->ragas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets->ragas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets->ragas) (1.17.0)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community->ragas) (1.1.0)\n",
            "Downloading ragas-0.2.15-py3-none-any.whl (190 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.9/190.9 kB\u001b[0m \u001b[31m18.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading diskcache-5.6.3-py3-none-any.whl (45 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.5/45.5 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n",
            "Installing collected packages: appdirs, diskcache, ragas\n",
            "Successfully installed appdirs-1.4.4 diskcache-5.6.3 ragas-0.2.15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from datasets import Dataset\n",
        "from ragas import evaluate\n",
        "from ragas.metrics import faithfulness, answer_correctness\n",
        "\n",
        "# Load your CSV dataset\n",
        "df = pd.read_csv('bangla_constitution_part1_question_ans.csv')\n",
        "\n",
        "questions = df['Question'].tolist()\n",
        "ground_truth_answers = df['Answer'].tolist()\n",
        "retrieved_contexts = df['Context'].apply(lambda x: [x]).tolist()\n",
        "\n",
        "# Generate answers by calling your LLM for each question\n",
        "generated_answers = []\n",
        "for q in questions:\n",
        "    # Replace with your actual LLM call, e.g. main_chain.invoke(q)\n",
        "    answer = final_ans(q)  # Make sure main_chain.invoke returns a string answer\n",
        "    generated_answers.append(answer)\n",
        "\n",
        "# Prepare dataset for evaluation\n",
        "data_samples = {\n",
        "    'question': questions,\n",
        "    'answer': generated_answers,\n",
        "    'contexts': retrieved_contexts,\n",
        "    'ground_truth': ground_truth_answers\n",
        "}\n",
        "dataset = Dataset.from_dict(data_samples)\n",
        "\n",
        "# Evaluate with RAGAS metrics\n",
        "score = evaluate(dataset, metrics=[faithfulness, answer_correctness])\n",
        "\n",
        "# Convert scores to pandas DataFrame for per-question scores\n",
        "df_scores = score.to_pandas()\n",
        "\n",
        "# Print scores question-wise\n",
        "for i, question in enumerate(questions):\n",
        "    correctness = df_scores.loc[i, 'answer_correctness']\n",
        "    faithful = df_scores.loc[i, 'faithfulness']\n",
        "    print(f\"Question {i+1}: {question}\")\n",
        "    print(f\"Answer {i+1}: {ground_truth_answers[i]}\")\n",
        "    print(f\"Generated Answer: {generated_answers[i]}\")\n",
        "    print(f\"Answer Correctness Score: {correctness:.3f}\")\n",
        "    print(f\"Faithfulness Score: {faithful:.3f}\")\n",
        "    print('-' * 50)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485,
          "referenced_widgets": [
            "d9933ca24c244c689e1c302fde07f228",
            "149bdedb57ca4daa9f8570dcdeb3a5dd",
            "3349f661c60b4ace935f675b9bc3eae7",
            "999b32f5a4cd4db08227915b60db696a",
            "9b835d64627b4a3fa417978e7a5c02c9",
            "3aca964831274a809b7d81eaabf03035",
            "78c31192de65472aa7b28921a838fe1e",
            "ad57939e91d545bcacad8a085e4c3808",
            "fa423034191a4403a97483c92681da39",
            "2a61924460f648bb91a554ed0a32adce",
            "dfd4d05cff174cad999ca211f1527895"
          ]
        },
        "id": "AbE48aROCCWr",
        "outputId": "ebf967de-d03d-4ba5-bfe0-4692ef3a6903"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Evaluating:   0%|          | 0/8 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d9933ca24c244c689e1c302fde07f228"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 1: দেশের সর্বোচ্চ আইন কী?\n",
            "Answer 1: বাংলাদেশের সংবিধান দেশের সর্বোচ্চ আইন।\n",
            "Generated Answer: দেশের সর্বোচ্চ আইন হলো সংবিধান। সংবিধান হলো দেশের সর্বোচ্চ আইন এবং এই ক্ষমতা শুধু সংবিধানের মাধ্যমেই প্রয়োগ করা যাবে। যদি কোনো আইন সংবিধানের বিরোধিতা করে, তাহলে সেই আইনের অসংগত অংশ বাতিল হবে।\n",
            "Answer Correctness Score: 0.732\n",
            "Faithfulness Score: 0.500\n",
            "--------------------------------------------------\n",
            "Question 2: বাংলাদেশের জাতীয় সঙ্গীত কী?\n",
            "Answer 2: 'আমার সোনার বাংলা' জাতীয় সঙ্গীত।\n",
            "Generated Answer: আমার সোনার বাংলা গানটি বাংলাদেশের জাতীয় সঙ্গীত।\n",
            "Answer Correctness Score: 0.990\n",
            "Faithfulness Score: 1.000\n",
            "--------------------------------------------------\n",
            "Question 3: রাষ্ট্রের মূলনীতিসমূহ কী কী?\n",
            "Answer 3: গণতন্ত্র, সমাজবাদী রাষ্ট্রব্যবস্থা, ধর্মনিরপেক্ষতা।\n",
            "Generated Answer: আমরা অঙ্গীকার করছি, সেই সব মহান আদর্শ—যেগুলো আমাদের সাহসী জনগণকে জাতীয় মুক্তি সংগ্রামে আত্মনিয়োগ করতে এবং অনেক বীর শহীদকে জীবন উৎসর্গ করতে অনুপ্রাণিত করেছিল—যেমন: জাতীয়তাবাদ, সমাজতন্ত্র, গণতন্ত্র ও ধর্মনিরপেক্ষতা—এই আদর্শগুলোই হবে এই সংবিধানের মূলনীতি। এই নীতিসমূহ বাংলাদেশের পরিচালনার মূল সূত্র হবে। আইন তৈরির সময় রাষ্ট্র এগুলো মানবে, আইন ও সংবিধান ব্যাখ্যা করার সময় এগুলো নির্দেশক হবে, আর রাষ্ট্র ও নাগরিকদের কাজের ভিত্তি হবে। তবে এই নীতিসমূহ আদালতের মাধ্যমে জোর করানো যাবে না।\n",
            "Answer Correctness Score: 0.326\n",
            "Faithfulness Score: 0.000\n",
            "--------------------------------------------------\n",
            "Question 4: সংবিধানের সংশোধন কিভাবে হয়?\n",
            "Answer 4: সংসদে বিশেষ প্রস্তাব পাসের মাধ্যমে সংশোধন হয়।\n",
            "Generated Answer: সংবিধানের সংশোধন হয় সংসদের আইন-দ্বারা সংবিধানের কোনো বিধান সংযোজন, পরিবর্তন, প্রতিস্থাপন বা রহিতকরণের মাধ্যমে। সংশোধনী বিলের সম্পূর্ণ শিরোনামে স্পষ্টভাবে উল্লেখ থাকতে হবে যে সংবিধানের কোন বিধান সংশোধন করা হচ্ছে। সংবিধানের প্রস্তাবনা, প্রথম, দ্বিতীয়, তৃতীয় এবং একাদশ ভাগ, নবম-ক ভাগের নির্দিষ্ট অনুচ্ছেদ এবং সংবিধানের মৌলিক কাঠামোর সঙ্গে সম্পর্কিত অনুচ্ছেদগুলোতে কোনো পরিবর্তন, সংশোধন, বাদ দেওয়া বা প্রতিস্থাপন করা যাবেনা।\n",
            "Answer Correctness Score: 0.224\n",
            "Faithfulness Score: 0.250\n",
            "--------------------------------------------------\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "47915ae631cd4dc3a8c088c24900a928": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_98642ccb87e44b69a25c00f504c54462",
              "IPY_MODEL_cce8cb7ae4c7420ab7a977a84f99f3bb",
              "IPY_MODEL_9019a00cbf914f008fb7448523e90d02"
            ],
            "layout": "IPY_MODEL_aa961d25a65f400d84eb7cba0935f99e"
          }
        },
        "98642ccb87e44b69a25c00f504c54462": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2bcc59f57c354827b3ece596183d2db6",
            "placeholder": "​",
            "style": "IPY_MODEL_f0c444461968412fbc12b38d436c22ab",
            "value": "modules.json: 100%"
          }
        },
        "cce8cb7ae4c7420ab7a977a84f99f3bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d98e2638f1254f48b940d12b113cb5fd",
            "max": 387,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a46225954b4041dcbd03f265df026d6b",
            "value": 387
          }
        },
        "9019a00cbf914f008fb7448523e90d02": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_eadead3fca8c4cf4bfaa6928874b7805",
            "placeholder": "​",
            "style": "IPY_MODEL_e39d420797344e06a03413e2f13c3d8f",
            "value": " 387/387 [00:00&lt;00:00, 40.3kB/s]"
          }
        },
        "aa961d25a65f400d84eb7cba0935f99e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2bcc59f57c354827b3ece596183d2db6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f0c444461968412fbc12b38d436c22ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d98e2638f1254f48b940d12b113cb5fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a46225954b4041dcbd03f265df026d6b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "eadead3fca8c4cf4bfaa6928874b7805": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e39d420797344e06a03413e2f13c3d8f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "41e15d95d1b14334a4928717db6c17a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_966f323dba344f03ade85f13cb0396ba",
              "IPY_MODEL_fe08acd7645649aeb7c5f1a8621635a8",
              "IPY_MODEL_e9a9d233fc894b3bb942b4c3ae366a4d"
            ],
            "layout": "IPY_MODEL_2e6da1bf336d44048ac3c367e2b146f9"
          }
        },
        "966f323dba344f03ade85f13cb0396ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0ab65ca229ea4152981d48c3b3595f22",
            "placeholder": "​",
            "style": "IPY_MODEL_e7850859783e49c184f7c4c89ca7a120",
            "value": "README.md: 100%"
          }
        },
        "fe08acd7645649aeb7c5f1a8621635a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7bda556c19564f11b422cfb72f3adf39",
            "max": 160024,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_56608329e482415f8bfffb104c3f7540",
            "value": 160024
          }
        },
        "e9a9d233fc894b3bb942b4c3ae366a4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e36cc75a75e84cecb3d4c014aaebe3e0",
            "placeholder": "​",
            "style": "IPY_MODEL_309b310fa5e14fe3a404815b5514ce79",
            "value": " 160k/160k [00:00&lt;00:00, 3.44MB/s]"
          }
        },
        "2e6da1bf336d44048ac3c367e2b146f9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0ab65ca229ea4152981d48c3b3595f22": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e7850859783e49c184f7c4c89ca7a120": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7bda556c19564f11b422cfb72f3adf39": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "56608329e482415f8bfffb104c3f7540": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e36cc75a75e84cecb3d4c014aaebe3e0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "309b310fa5e14fe3a404815b5514ce79": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8ae29511c15748099075f1d73ffab64b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1b0ad94664584fc49cfdd83305a420e8",
              "IPY_MODEL_2fa4e3d21f254bd98288cdaec5d587c0",
              "IPY_MODEL_b2bcc5137e68406b8a08497c3f47fb1e"
            ],
            "layout": "IPY_MODEL_0e434dde6cfa4ce8acdd30629b8d5bf9"
          }
        },
        "1b0ad94664584fc49cfdd83305a420e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fa9c6ca89dcd4d6a8d61473f9c5ef0a8",
            "placeholder": "​",
            "style": "IPY_MODEL_f465d650828f48d4b3091bf90bf57415",
            "value": "sentence_bert_config.json: 100%"
          }
        },
        "2fa4e3d21f254bd98288cdaec5d587c0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cf00e92c13d54184a229b4fd61d146ae",
            "max": 57,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_064d0c7ee013411983901a17c1d03651",
            "value": 57
          }
        },
        "b2bcc5137e68406b8a08497c3f47fb1e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_81fd1bb8a9264ed396fc6d416e5fa55a",
            "placeholder": "​",
            "style": "IPY_MODEL_3b017472c7174b8cbbbfd44dae6acbc4",
            "value": " 57.0/57.0 [00:00&lt;00:00, 4.56kB/s]"
          }
        },
        "0e434dde6cfa4ce8acdd30629b8d5bf9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa9c6ca89dcd4d6a8d61473f9c5ef0a8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f465d650828f48d4b3091bf90bf57415": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cf00e92c13d54184a229b4fd61d146ae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "064d0c7ee013411983901a17c1d03651": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "81fd1bb8a9264ed396fc6d416e5fa55a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3b017472c7174b8cbbbfd44dae6acbc4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "702c5c195f594b94865f83aa9f6ba405": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ffcf1263aeab4a47b63d26838a069fb8",
              "IPY_MODEL_5e4ec29b934840e3bd680c7a618231d3",
              "IPY_MODEL_e0f29bd1b69144eb887abed541d79dc1"
            ],
            "layout": "IPY_MODEL_8656c4013b6f4ce4bbf255847aac4c8b"
          }
        },
        "ffcf1263aeab4a47b63d26838a069fb8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c78f1cbe3c0946a48830f0d5a27b017b",
            "placeholder": "​",
            "style": "IPY_MODEL_eae05dafde8f4f2b88902f793dcd0abd",
            "value": "config.json: 100%"
          }
        },
        "5e4ec29b934840e3bd680c7a618231d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7af8d9acfab54c518fd99cc15842a3b0",
            "max": 690,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3e790a97045348f6a3c11534da50bfb4",
            "value": 690
          }
        },
        "e0f29bd1b69144eb887abed541d79dc1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5131b883471f48bca159b91f33fdf1c4",
            "placeholder": "​",
            "style": "IPY_MODEL_4066b0d5138d45b09350a8a3ddbb0607",
            "value": " 690/690 [00:00&lt;00:00, 9.96kB/s]"
          }
        },
        "8656c4013b6f4ce4bbf255847aac4c8b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c78f1cbe3c0946a48830f0d5a27b017b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eae05dafde8f4f2b88902f793dcd0abd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7af8d9acfab54c518fd99cc15842a3b0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3e790a97045348f6a3c11534da50bfb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5131b883471f48bca159b91f33fdf1c4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4066b0d5138d45b09350a8a3ddbb0607": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6c7665ba5ff84e6199501bd811c59318": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b51e19ae9abe4f7d8e52e6e355543633",
              "IPY_MODEL_78befb93e9954af6b5adca3bbdfb3c4e",
              "IPY_MODEL_1fbdd47fa6e543d9983eda4696c895ec"
            ],
            "layout": "IPY_MODEL_acf9e85602ba4ce2af6f616d84843a68"
          }
        },
        "b51e19ae9abe4f7d8e52e6e355543633": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e4d0b1a3fed2434e8f8498817f37d8a0",
            "placeholder": "​",
            "style": "IPY_MODEL_ef14016f27114ec8965de5e9b3f958bc",
            "value": "model.safetensors: 100%"
          }
        },
        "78befb93e9954af6b5adca3bbdfb3c4e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_68dac05b433e40e7a7aaf4efd603b2bc",
            "max": 2239611368,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_635f412160124ca5be6b1ada24231725",
            "value": 2239611368
          }
        },
        "1fbdd47fa6e543d9983eda4696c895ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bde5dbb6c5a2425a8c6ee32d595f3687",
            "placeholder": "​",
            "style": "IPY_MODEL_13f202f8a6214e2bac365e766a562829",
            "value": " 2.24G/2.24G [00:11&lt;00:00, 181MB/s]"
          }
        },
        "acf9e85602ba4ce2af6f616d84843a68": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e4d0b1a3fed2434e8f8498817f37d8a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ef14016f27114ec8965de5e9b3f958bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "68dac05b433e40e7a7aaf4efd603b2bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "635f412160124ca5be6b1ada24231725": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bde5dbb6c5a2425a8c6ee32d595f3687": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "13f202f8a6214e2bac365e766a562829": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a046224c62c64b96ba0bfbb08ce1a777": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e06e56b9521146a7b37b72d5bda4652e",
              "IPY_MODEL_bb7b8f6fc5a94fcdb83e707e5b5303f4",
              "IPY_MODEL_ffed2db81e034e7088bcccc0b127b94e"
            ],
            "layout": "IPY_MODEL_f063ee6d9c0344a4adb80e616f88f35d"
          }
        },
        "e06e56b9521146a7b37b72d5bda4652e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3aed92de4ecb4fb2bb540c97a3f5357f",
            "placeholder": "​",
            "style": "IPY_MODEL_08a18ce363bc49c58adb0030e371ded0",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "bb7b8f6fc5a94fcdb83e707e5b5303f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8b708dffec514aed8e63b3099936e6f1",
            "max": 418,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_94ed30c4531f458bb66d4d3ceb7a1c13",
            "value": 418
          }
        },
        "ffed2db81e034e7088bcccc0b127b94e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_651451d2d6ae40a89ad2855c3c65420e",
            "placeholder": "​",
            "style": "IPY_MODEL_f5f179fb8319484cb6b1cc91a0f4aa52",
            "value": " 418/418 [00:00&lt;00:00, 47.2kB/s]"
          }
        },
        "f063ee6d9c0344a4adb80e616f88f35d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3aed92de4ecb4fb2bb540c97a3f5357f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "08a18ce363bc49c58adb0030e371ded0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8b708dffec514aed8e63b3099936e6f1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "94ed30c4531f458bb66d4d3ceb7a1c13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "651451d2d6ae40a89ad2855c3c65420e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f5f179fb8319484cb6b1cc91a0f4aa52": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "66a95333808b4e74b897483cf7bd5081": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6ec6646d8c8240399b51d65027bf1b85",
              "IPY_MODEL_05c7460beefb478d929b69de1a0cbd59",
              "IPY_MODEL_0fdb7fb6f5c64734b2121ec11ffc8f1c"
            ],
            "layout": "IPY_MODEL_36bae468e70b41b2b899dc0571c65673"
          }
        },
        "6ec6646d8c8240399b51d65027bf1b85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e0828a8eaa9d456c88eaf6bf77f95d43",
            "placeholder": "​",
            "style": "IPY_MODEL_3fcc3aa8ae2b40b68392d8f97f2170d2",
            "value": "sentencepiece.bpe.model: 100%"
          }
        },
        "05c7460beefb478d929b69de1a0cbd59": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_467781b5026b4a45b3c9cecb09998591",
            "max": 5069051,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_571819fb9bb24c45905b9f9104ac20b3",
            "value": 5069051
          }
        },
        "0fdb7fb6f5c64734b2121ec11ffc8f1c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ec29b7e2bf2e4632996d8bbfbee8b90a",
            "placeholder": "​",
            "style": "IPY_MODEL_583b4c71b6f24bbdbe99db91f2e093ac",
            "value": " 5.07M/5.07M [00:00&lt;00:00, 171MB/s]"
          }
        },
        "36bae468e70b41b2b899dc0571c65673": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e0828a8eaa9d456c88eaf6bf77f95d43": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3fcc3aa8ae2b40b68392d8f97f2170d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "467781b5026b4a45b3c9cecb09998591": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "571819fb9bb24c45905b9f9104ac20b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ec29b7e2bf2e4632996d8bbfbee8b90a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "583b4c71b6f24bbdbe99db91f2e093ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e865d6d111dc434fae591aeee89e314d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3ca7d63aee4e45cb9a9f62eb7bca3d6c",
              "IPY_MODEL_b925d839a18a41db92e196269fb7a9f5",
              "IPY_MODEL_ca28858de85e496cb640fdf3d131cbf7"
            ],
            "layout": "IPY_MODEL_de96d0bdc5ee4b43a2d3955718b31204"
          }
        },
        "3ca7d63aee4e45cb9a9f62eb7bca3d6c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d290870c9d741b593dc2a0f12345c3e",
            "placeholder": "​",
            "style": "IPY_MODEL_b608cd7eaca44def842097a25e03da00",
            "value": "tokenizer.json: 100%"
          }
        },
        "b925d839a18a41db92e196269fb7a9f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e036cec5b15048bcba6515072d4a86f2",
            "max": 17082660,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_84aa755ac0314f94bec193121daa7795",
            "value": 17082660
          }
        },
        "ca28858de85e496cb640fdf3d131cbf7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_08f9dfef23f843d7977682bbdb8b4382",
            "placeholder": "​",
            "style": "IPY_MODEL_6d52d9c69b1a4c9e90cde6b44d3c8e61",
            "value": " 17.1M/17.1M [00:00&lt;00:00, 273MB/s]"
          }
        },
        "de96d0bdc5ee4b43a2d3955718b31204": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9d290870c9d741b593dc2a0f12345c3e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b608cd7eaca44def842097a25e03da00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e036cec5b15048bcba6515072d4a86f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "84aa755ac0314f94bec193121daa7795": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "08f9dfef23f843d7977682bbdb8b4382": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6d52d9c69b1a4c9e90cde6b44d3c8e61": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "798cf6328cea4ee4934f6b287ca7f999": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b39df25903ad40f5b465971f24ae7663",
              "IPY_MODEL_d363b76794c7460f833b6205f3267597",
              "IPY_MODEL_d0577b9a4a4e49c39a8e51aa59d94909"
            ],
            "layout": "IPY_MODEL_29874b647005472cbd4040fad962a2b1"
          }
        },
        "b39df25903ad40f5b465971f24ae7663": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_03002e649cc74b8093a9a1f666761c8d",
            "placeholder": "​",
            "style": "IPY_MODEL_9b4c6e2c82cf4d6cb9f69cb59c67c08a",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "d363b76794c7460f833b6205f3267597": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_305f828ce9234158bf4480dcd74c2205",
            "max": 280,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a65778e73295487e9fabda910e1f4412",
            "value": 280
          }
        },
        "d0577b9a4a4e49c39a8e51aa59d94909": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_29220a0c963f42a280a2502b5c243d6e",
            "placeholder": "​",
            "style": "IPY_MODEL_b1c042d7ca3e40e7b0273c900702d82b",
            "value": " 280/280 [00:00&lt;00:00, 31.2kB/s]"
          }
        },
        "29874b647005472cbd4040fad962a2b1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "03002e649cc74b8093a9a1f666761c8d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9b4c6e2c82cf4d6cb9f69cb59c67c08a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "305f828ce9234158bf4480dcd74c2205": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a65778e73295487e9fabda910e1f4412": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "29220a0c963f42a280a2502b5c243d6e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b1c042d7ca3e40e7b0273c900702d82b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2bd9b9b58b754d2386b1eee080400222": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_194b8b8d05fe4ca4b90329fd59e15f69",
              "IPY_MODEL_3b03f8c474a64f4ca8e65552d03b3254",
              "IPY_MODEL_e94beb9f73a249d4af556fce7c0c01be"
            ],
            "layout": "IPY_MODEL_e1285c9aac394fdda1bcdd6b671e1e91"
          }
        },
        "194b8b8d05fe4ca4b90329fd59e15f69": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bae4c63fbc0c4b9d8a351bea2f66c1f9",
            "placeholder": "​",
            "style": "IPY_MODEL_cd5d7ae9363140cf91469a7c805bfb72",
            "value": "config.json: 100%"
          }
        },
        "3b03f8c474a64f4ca8e65552d03b3254": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_025f7683f545493588c2319e3b1dc86e",
            "max": 201,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_25f258e648274fedb98be24281a2d3c0",
            "value": 201
          }
        },
        "e94beb9f73a249d4af556fce7c0c01be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0fcec56aa35f4550aa9874e0c9a82b32",
            "placeholder": "​",
            "style": "IPY_MODEL_8071e8ee7ea2461486a986226e2df10a",
            "value": " 201/201 [00:00&lt;00:00, 23.2kB/s]"
          }
        },
        "e1285c9aac394fdda1bcdd6b671e1e91": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bae4c63fbc0c4b9d8a351bea2f66c1f9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd5d7ae9363140cf91469a7c805bfb72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "025f7683f545493588c2319e3b1dc86e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "25f258e648274fedb98be24281a2d3c0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0fcec56aa35f4550aa9874e0c9a82b32": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8071e8ee7ea2461486a986226e2df10a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d9933ca24c244c689e1c302fde07f228": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_149bdedb57ca4daa9f8570dcdeb3a5dd",
              "IPY_MODEL_3349f661c60b4ace935f675b9bc3eae7",
              "IPY_MODEL_999b32f5a4cd4db08227915b60db696a"
            ],
            "layout": "IPY_MODEL_9b835d64627b4a3fa417978e7a5c02c9"
          }
        },
        "149bdedb57ca4daa9f8570dcdeb3a5dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3aca964831274a809b7d81eaabf03035",
            "placeholder": "​",
            "style": "IPY_MODEL_78c31192de65472aa7b28921a838fe1e",
            "value": "Evaluating: 100%"
          }
        },
        "3349f661c60b4ace935f675b9bc3eae7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad57939e91d545bcacad8a085e4c3808",
            "max": 8,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fa423034191a4403a97483c92681da39",
            "value": 8
          }
        },
        "999b32f5a4cd4db08227915b60db696a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2a61924460f648bb91a554ed0a32adce",
            "placeholder": "​",
            "style": "IPY_MODEL_dfd4d05cff174cad999ca211f1527895",
            "value": " 8/8 [00:18&lt;00:00,  2.17s/it]"
          }
        },
        "9b835d64627b4a3fa417978e7a5c02c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3aca964831274a809b7d81eaabf03035": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "78c31192de65472aa7b28921a838fe1e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ad57939e91d545bcacad8a085e4c3808": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa423034191a4403a97483c92681da39": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "2a61924460f648bb91a554ed0a32adce": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dfd4d05cff174cad999ca211f1527895": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}